// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "navinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

void protobuf_ShutdownFile_navinfo_2eproto() {
  delete navList::default_instance_;
  delete TagList::default_instance_;
  delete NavInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_navinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_navinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  navList::default_instance_ = new navList();
  TagList::default_instance_ = new TagList();
  NavInfo::default_instance_ = new NavInfo();
  navList::default_instance_->InitAsDefaultInstance();
  TagList::default_instance_->InitAsDefaultInstance();
  NavInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_navinfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_navinfo_2eproto_once_);
void protobuf_AddDesc_navinfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_navinfo_2eproto_once_,
                 &protobuf_AddDesc_navinfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_navinfo_2eproto {
  StaticDescriptorInitializer_navinfo_2eproto() {
    protobuf_AddDesc_navinfo_2eproto();
  }
} static_descriptor_initializer_navinfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int navList::kChannelFieldNumber;
const int navList::kTaglistFieldNumber;
#endif  // !_MSC_VER

navList::navList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void navList::InitAsDefaultInstance() {
}

navList::navList(const navList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void navList::SharedCtor() {
  _cached_size_ = 0;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

navList::~navList() {
  SharedDtor();
}

void navList::SharedDtor() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void navList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const navList& navList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_navinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_navinfo_2eproto();
#endif
  return *default_instance_;
}

navList* navList::default_instance_ = NULL;

navList* navList::New() const {
  return new navList;
}

void navList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
  }
  taglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool navList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_taglist;
        break;
      }

      // repeated .cloudbox.protobuf.TagList taglist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taglist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_taglist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void navList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channel(), output);
  }

  // repeated .cloudbox.protobuf.TagList taglist = 2;
  for (int i = 0; i < this->taglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->taglist(i), output);
  }

}

int navList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

  }
  // repeated .cloudbox.protobuf.TagList taglist = 2;
  total_size += 1 * this->taglist_size();
  for (int i = 0; i < this->taglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taglist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void navList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const navList*>(&from));
}

void navList::MergeFrom(const navList& from) {
  GOOGLE_CHECK_NE(&from, this);
  taglist_.MergeFrom(from.taglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
  }
}

void navList::CopyFrom(const navList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool navList::IsInitialized() const {

  return true;
}

void navList::Swap(navList* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    taglist_.Swap(&other->taglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string navList::GetTypeName() const {
  return "cloudbox.protobuf.navList";
}


// ===================================================================

#ifndef _MSC_VER
const int TagList::kTitleFieldNumber;
const int TagList::kUrlFieldNumber;
#endif  // !_MSC_VER

TagList::TagList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TagList::InitAsDefaultInstance() {
}

TagList::TagList(const TagList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TagList::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagList::~TagList() {
  SharedDtor();
}

void TagList::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TagList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TagList& TagList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_navinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_navinfo_2eproto();
#endif
  return *default_instance_;
}

TagList* TagList::default_instance_ = NULL;

TagList* TagList::New() const {
  return new TagList;
}

void TagList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TagList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TagList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }

}

int TagList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TagList*>(&from));
}

void TagList::MergeFrom(const TagList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
}

void TagList::CopyFrom(const TagList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagList::IsInitialized() const {

  return true;
}

void TagList::Swap(TagList* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TagList::GetTypeName() const {
  return "cloudbox.protobuf.TagList";
}


// ===================================================================

#ifndef _MSC_VER
const int NavInfo::kNavlistFieldNumber;
#endif  // !_MSC_VER

NavInfo::NavInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NavInfo::InitAsDefaultInstance() {
}

NavInfo::NavInfo(const NavInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NavInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NavInfo::~NavInfo() {
  SharedDtor();
}

void NavInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NavInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NavInfo& NavInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_navinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_navinfo_2eproto();
#endif
  return *default_instance_;
}

NavInfo* NavInfo::default_instance_ = NULL;

NavInfo* NavInfo::New() const {
  return new NavInfo;
}

void NavInfo::Clear() {
  navlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NavInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cloudbox.protobuf.navList navlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_navlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_navlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_navlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NavInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cloudbox.protobuf.navList navlist = 1;
  for (int i = 0; i < this->navlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->navlist(i), output);
  }

}

int NavInfo::ByteSize() const {
  int total_size = 0;

  // repeated .cloudbox.protobuf.navList navlist = 1;
  total_size += 1 * this->navlist_size();
  for (int i = 0; i < this->navlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->navlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NavInfo*>(&from));
}

void NavInfo::MergeFrom(const NavInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  navlist_.MergeFrom(from.navlist_);
}

void NavInfo::CopyFrom(const NavInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavInfo::IsInitialized() const {

  return true;
}

void NavInfo::Swap(NavInfo* other) {
  if (other != this) {
    navlist_.Swap(&other->navlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NavInfo::GetTypeName() const {
  return "cloudbox.protobuf.NavInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)
