// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appsinfo.proto

#ifndef PROTOBUF_appsinfo_2eproto__INCLUDED
#define PROTOBUF_appsinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_appsinfo_2eproto();
void protobuf_AssignDesc_appsinfo_2eproto();
void protobuf_ShutdownFile_appsinfo_2eproto();

class AppsList;
class AppsInfo;

// ===================================================================

class AppsList : public ::google::protobuf::MessageLite {
 public:
  AppsList();
  virtual ~AppsList();

  AppsList(const AppsList& from);

  inline AppsList& operator=(const AppsList& from) {
    CopyFrom(from);
    return *this;
  }

  static const AppsList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AppsList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AppsList* other);

  // implements Message ----------------------------------------------

  AppsList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AppsList& from);
  void MergeFrom(const AppsList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string logo = 3;
  inline bool has_logo() const;
  inline void clear_logo();
  static const int kLogoFieldNumber = 3;
  inline const ::std::string& logo() const;
  inline void set_logo(const ::std::string& value);
  inline void set_logo(const char* value);
  inline void set_logo(const char* value, size_t size);
  inline ::std::string* mutable_logo();
  inline ::std::string* release_logo();
  inline void set_allocated_logo(::std::string* logo);

  // optional string size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline const ::std::string& size() const;
  inline void set_size(const ::std::string& value);
  inline void set_size(const char* value);
  inline void set_size(const char* value, size_t size);
  inline ::std::string* mutable_size();
  inline ::std::string* release_size();
  inline void set_allocated_size(::std::string* size);

  // optional string description = 5;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 5;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional string image = 6;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 6;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const char* value, size_t size);
  inline ::std::string* mutable_image();
  inline ::std::string* release_image();
  inline void set_allocated_image(::std::string* image);

  // optional int32 id = 7;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 7;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string package = 8;
  inline bool has_package() const;
  inline void clear_package();
  static const int kPackageFieldNumber = 8;
  inline const ::std::string& package() const;
  inline void set_package(const ::std::string& value);
  inline void set_package(const char* value);
  inline void set_package(const char* value, size_t size);
  inline ::std::string* mutable_package();
  inline ::std::string* release_package();
  inline void set_allocated_package(::std::string* package);

  // optional string color = 9;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 9;
  inline const ::std::string& color() const;
  inline void set_color(const ::std::string& value);
  inline void set_color(const char* value);
  inline void set_color(const char* value, size_t size);
  inline ::std::string* mutable_color();
  inline ::std::string* release_color();
  inline void set_allocated_color(::std::string* color);

  // @@protoc_insertion_point(class_scope:cloudbox.protobuf.AppsList)
 private:
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_logo();
  inline void clear_has_logo();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_package();
  inline void clear_has_package();
  inline void set_has_color();
  inline void clear_has_color();

  ::std::string* url_;
  ::std::string* title_;
  ::std::string* logo_;
  ::std::string* size_;
  ::std::string* description_;
  ::std::string* image_;
  ::std::string* package_;
  ::std::string* color_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_appsinfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_appsinfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_appsinfo_2eproto();
  friend void protobuf_ShutdownFile_appsinfo_2eproto();

  void InitAsDefaultInstance();
  static AppsList* default_instance_;
};
// -------------------------------------------------------------------

class AppsInfo : public ::google::protobuf::MessageLite {
 public:
  AppsInfo();
  virtual ~AppsInfo();

  AppsInfo(const AppsInfo& from);

  inline AppsInfo& operator=(const AppsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const AppsInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const AppsInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(AppsInfo* other);

  // implements Message ----------------------------------------------

  AppsInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const AppsInfo& from);
  void MergeFrom(const AppsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // repeated .cloudbox.protobuf.AppsList messages = 2;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 2;
  inline const ::cloudbox::protobuf::AppsList& messages(int index) const;
  inline ::cloudbox::protobuf::AppsList* mutable_messages(int index);
  inline ::cloudbox::protobuf::AppsList* add_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::AppsList >&
      messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::AppsList >*
      mutable_messages();

  // optional int32 width = 3;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 3;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);

  // optional int32 height = 4;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 4;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cloudbox.protobuf.AppsInfo)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::AppsList > messages_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_appsinfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_appsinfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_appsinfo_2eproto();
  friend void protobuf_ShutdownFile_appsinfo_2eproto();

  void InitAsDefaultInstance();
  static AppsInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// AppsList

// optional string url = 1;
inline bool AppsList::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppsList::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppsList::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppsList::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& AppsList::url() const {
  return *url_;
}
inline void AppsList::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void AppsList::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void AppsList::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppsList::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* AppsList::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppsList::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 2;
inline bool AppsList::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppsList::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppsList::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppsList::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& AppsList::title() const {
  return *title_;
}
inline void AppsList::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void AppsList::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void AppsList::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppsList::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* AppsList::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppsList::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string logo = 3;
inline bool AppsList::has_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppsList::set_has_logo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppsList::clear_has_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppsList::clear_logo() {
  if (logo_ != &::google::protobuf::internal::kEmptyString) {
    logo_->clear();
  }
  clear_has_logo();
}
inline const ::std::string& AppsList::logo() const {
  return *logo_;
}
inline void AppsList::set_logo(const ::std::string& value) {
  set_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    logo_ = new ::std::string;
  }
  logo_->assign(value);
}
inline void AppsList::set_logo(const char* value) {
  set_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    logo_ = new ::std::string;
  }
  logo_->assign(value);
}
inline void AppsList::set_logo(const char* value, size_t size) {
  set_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    logo_ = new ::std::string;
  }
  logo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppsList::mutable_logo() {
  set_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    logo_ = new ::std::string;
  }
  return logo_;
}
inline ::std::string* AppsList::release_logo() {
  clear_has_logo();
  if (logo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logo_;
    logo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppsList::set_allocated_logo(::std::string* logo) {
  if (logo_ != &::google::protobuf::internal::kEmptyString) {
    delete logo_;
  }
  if (logo) {
    set_has_logo();
    logo_ = logo;
  } else {
    clear_has_logo();
    logo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string size = 4;
inline bool AppsList::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppsList::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppsList::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppsList::clear_size() {
  if (size_ != &::google::protobuf::internal::kEmptyString) {
    size_->clear();
  }
  clear_has_size();
}
inline const ::std::string& AppsList::size() const {
  return *size_;
}
inline void AppsList::set_size(const ::std::string& value) {
  set_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    size_ = new ::std::string;
  }
  size_->assign(value);
}
inline void AppsList::set_size(const char* value) {
  set_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    size_ = new ::std::string;
  }
  size_->assign(value);
}
inline void AppsList::set_size(const char* value, size_t size) {
  set_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    size_ = new ::std::string;
  }
  size_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppsList::mutable_size() {
  set_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    size_ = new ::std::string;
  }
  return size_;
}
inline ::std::string* AppsList::release_size() {
  clear_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = size_;
    size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppsList::set_allocated_size(::std::string* size) {
  if (size_ != &::google::protobuf::internal::kEmptyString) {
    delete size_;
  }
  if (size) {
    set_has_size();
    size_ = size;
  } else {
    clear_has_size();
    size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string description = 5;
inline bool AppsList::has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppsList::set_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppsList::clear_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppsList::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& AppsList::description() const {
  return *description_;
}
inline void AppsList::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void AppsList::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void AppsList::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppsList::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* AppsList::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppsList::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string image = 6;
inline bool AppsList::has_image() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppsList::set_has_image() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppsList::clear_has_image() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppsList::clear_image() {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    image_->clear();
  }
  clear_has_image();
}
inline const ::std::string& AppsList::image() const {
  return *image_;
}
inline void AppsList::set_image(const ::std::string& value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void AppsList::set_image(const char* value) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void AppsList::set_image(const char* value, size_t size) {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppsList::mutable_image() {
  set_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    image_ = new ::std::string;
  }
  return image_;
}
inline ::std::string* AppsList::release_image() {
  clear_has_image();
  if (image_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_;
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppsList::set_allocated_image(::std::string* image) {
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (image) {
    set_has_image();
    image_ = image;
  } else {
    clear_has_image();
    image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 id = 7;
inline bool AppsList::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppsList::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AppsList::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AppsList::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AppsList::id() const {
  return id_;
}
inline void AppsList::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string package = 8;
inline bool AppsList::has_package() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AppsList::set_has_package() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AppsList::clear_has_package() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AppsList::clear_package() {
  if (package_ != &::google::protobuf::internal::kEmptyString) {
    package_->clear();
  }
  clear_has_package();
}
inline const ::std::string& AppsList::package() const {
  return *package_;
}
inline void AppsList::set_package(const ::std::string& value) {
  set_has_package();
  if (package_ == &::google::protobuf::internal::kEmptyString) {
    package_ = new ::std::string;
  }
  package_->assign(value);
}
inline void AppsList::set_package(const char* value) {
  set_has_package();
  if (package_ == &::google::protobuf::internal::kEmptyString) {
    package_ = new ::std::string;
  }
  package_->assign(value);
}
inline void AppsList::set_package(const char* value, size_t size) {
  set_has_package();
  if (package_ == &::google::protobuf::internal::kEmptyString) {
    package_ = new ::std::string;
  }
  package_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppsList::mutable_package() {
  set_has_package();
  if (package_ == &::google::protobuf::internal::kEmptyString) {
    package_ = new ::std::string;
  }
  return package_;
}
inline ::std::string* AppsList::release_package() {
  clear_has_package();
  if (package_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = package_;
    package_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppsList::set_allocated_package(::std::string* package) {
  if (package_ != &::google::protobuf::internal::kEmptyString) {
    delete package_;
  }
  if (package) {
    set_has_package();
    package_ = package;
  } else {
    clear_has_package();
    package_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string color = 9;
inline bool AppsList::has_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AppsList::set_has_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AppsList::clear_has_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AppsList::clear_color() {
  if (color_ != &::google::protobuf::internal::kEmptyString) {
    color_->clear();
  }
  clear_has_color();
}
inline const ::std::string& AppsList::color() const {
  return *color_;
}
inline void AppsList::set_color(const ::std::string& value) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    color_ = new ::std::string;
  }
  color_->assign(value);
}
inline void AppsList::set_color(const char* value) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    color_ = new ::std::string;
  }
  color_->assign(value);
}
inline void AppsList::set_color(const char* value, size_t size) {
  set_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    color_ = new ::std::string;
  }
  color_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppsList::mutable_color() {
  set_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    color_ = new ::std::string;
  }
  return color_;
}
inline ::std::string* AppsList::release_color() {
  clear_has_color();
  if (color_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = color_;
    color_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppsList::set_allocated_color(::std::string* color) {
  if (color_ != &::google::protobuf::internal::kEmptyString) {
    delete color_;
  }
  if (color) {
    set_has_color();
    color_ = color;
  } else {
    clear_has_color();
    color_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AppsInfo

// optional int32 code = 1;
inline bool AppsInfo::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppsInfo::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppsInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppsInfo::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AppsInfo::code() const {
  return code_;
}
inline void AppsInfo::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// repeated .cloudbox.protobuf.AppsList messages = 2;
inline int AppsInfo::messages_size() const {
  return messages_.size();
}
inline void AppsInfo::clear_messages() {
  messages_.Clear();
}
inline const ::cloudbox::protobuf::AppsList& AppsInfo::messages(int index) const {
  return messages_.Get(index);
}
inline ::cloudbox::protobuf::AppsList* AppsInfo::mutable_messages(int index) {
  return messages_.Mutable(index);
}
inline ::cloudbox::protobuf::AppsList* AppsInfo::add_messages() {
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::AppsList >&
AppsInfo::messages() const {
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::AppsList >*
AppsInfo::mutable_messages() {
  return &messages_;
}

// optional int32 width = 3;
inline bool AppsInfo::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppsInfo::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppsInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppsInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 AppsInfo::width() const {
  return width_;
}
inline void AppsInfo::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 4;
inline bool AppsInfo::has_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppsInfo::set_has_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppsInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppsInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 AppsInfo::height() const {
  return height_;
}
inline void AppsInfo::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_appsinfo_2eproto__INCLUDED
