// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navinfo.proto

#ifndef PROTOBUF_navinfo_2eproto__INCLUDED
#define PROTOBUF_navinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_navinfo_2eproto();
void protobuf_AssignDesc_navinfo_2eproto();
void protobuf_ShutdownFile_navinfo_2eproto();

class navList;
class TagList;
class NavInfo;

// ===================================================================

class navList : public ::google::protobuf::MessageLite {
 public:
  navList();
  virtual ~navList();

  navList(const navList& from);

  inline navList& operator=(const navList& from) {
    CopyFrom(from);
    return *this;
  }

  static const navList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const navList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(navList* other);

  // implements Message ----------------------------------------------

  navList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const navList& from);
  void MergeFrom(const navList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 1;
  inline const ::std::string& channel() const;
  inline void set_channel(const ::std::string& value);
  inline void set_channel(const char* value);
  inline void set_channel(const char* value, size_t size);
  inline ::std::string* mutable_channel();
  inline ::std::string* release_channel();
  inline void set_allocated_channel(::std::string* channel);

  // repeated .cloudbox.protobuf.TagList taglist = 2;
  inline int taglist_size() const;
  inline void clear_taglist();
  static const int kTaglistFieldNumber = 2;
  inline const ::cloudbox::protobuf::TagList& taglist(int index) const;
  inline ::cloudbox::protobuf::TagList* mutable_taglist(int index);
  inline ::cloudbox::protobuf::TagList* add_taglist();
  inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::TagList >&
      taglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::TagList >*
      mutable_taglist();

  // @@protoc_insertion_point(class_scope:cloudbox.protobuf.navList)
 private:
  inline void set_has_channel();
  inline void clear_has_channel();

  ::std::string* channel_;
  ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::TagList > taglist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_navinfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_navinfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_navinfo_2eproto();
  friend void protobuf_ShutdownFile_navinfo_2eproto();

  void InitAsDefaultInstance();
  static navList* default_instance_;
};
// -------------------------------------------------------------------

class TagList : public ::google::protobuf::MessageLite {
 public:
  TagList();
  virtual ~TagList();

  TagList(const TagList& from);

  inline TagList& operator=(const TagList& from) {
    CopyFrom(from);
    return *this;
  }

  static const TagList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TagList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TagList* other);

  // implements Message ----------------------------------------------

  TagList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TagList& from);
  void MergeFrom(const TagList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:cloudbox.protobuf.TagList)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_url();
  inline void clear_has_url();

  ::std::string* title_;
  ::std::string* url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_navinfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_navinfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_navinfo_2eproto();
  friend void protobuf_ShutdownFile_navinfo_2eproto();

  void InitAsDefaultInstance();
  static TagList* default_instance_;
};
// -------------------------------------------------------------------

class NavInfo : public ::google::protobuf::MessageLite {
 public:
  NavInfo();
  virtual ~NavInfo();

  NavInfo(const NavInfo& from);

  inline NavInfo& operator=(const NavInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const NavInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NavInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NavInfo* other);

  // implements Message ----------------------------------------------

  NavInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NavInfo& from);
  void MergeFrom(const NavInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cloudbox.protobuf.navList navlist = 1;
  inline int navlist_size() const;
  inline void clear_navlist();
  static const int kNavlistFieldNumber = 1;
  inline const ::cloudbox::protobuf::navList& navlist(int index) const;
  inline ::cloudbox::protobuf::navList* mutable_navlist(int index);
  inline ::cloudbox::protobuf::navList* add_navlist();
  inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::navList >&
      navlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::navList >*
      mutable_navlist();

  // @@protoc_insertion_point(class_scope:cloudbox.protobuf.NavInfo)
 private:

  ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::navList > navlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_navinfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_navinfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_navinfo_2eproto();
  friend void protobuf_ShutdownFile_navinfo_2eproto();

  void InitAsDefaultInstance();
  static NavInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// navList

// optional string channel = 1;
inline bool navList::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void navList::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void navList::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void navList::clear_channel() {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    channel_->clear();
  }
  clear_has_channel();
}
inline const ::std::string& navList::channel() const {
  return *channel_;
}
inline void navList::set_channel(const ::std::string& value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void navList::set_channel(const char* value) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(value);
}
inline void navList::set_channel(const char* value, size_t size) {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  channel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* navList::mutable_channel() {
  set_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    channel_ = new ::std::string;
  }
  return channel_;
}
inline ::std::string* navList::release_channel() {
  clear_has_channel();
  if (channel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = channel_;
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void navList::set_allocated_channel(::std::string* channel) {
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (channel) {
    set_has_channel();
    channel_ = channel;
  } else {
    clear_has_channel();
    channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .cloudbox.protobuf.TagList taglist = 2;
inline int navList::taglist_size() const {
  return taglist_.size();
}
inline void navList::clear_taglist() {
  taglist_.Clear();
}
inline const ::cloudbox::protobuf::TagList& navList::taglist(int index) const {
  return taglist_.Get(index);
}
inline ::cloudbox::protobuf::TagList* navList::mutable_taglist(int index) {
  return taglist_.Mutable(index);
}
inline ::cloudbox::protobuf::TagList* navList::add_taglist() {
  return taglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::TagList >&
navList::taglist() const {
  return taglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::TagList >*
navList::mutable_taglist() {
  return &taglist_;
}

// -------------------------------------------------------------------

// TagList

// optional string title = 1;
inline bool TagList::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TagList::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TagList::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TagList::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& TagList::title() const {
  return *title_;
}
inline void TagList::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void TagList::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void TagList::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TagList::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* TagList::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TagList::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string url = 2;
inline bool TagList::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TagList::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TagList::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TagList::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& TagList::url() const {
  return *url_;
}
inline void TagList::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void TagList::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void TagList::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TagList::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* TagList::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TagList::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NavInfo

// repeated .cloudbox.protobuf.navList navlist = 1;
inline int NavInfo::navlist_size() const {
  return navlist_.size();
}
inline void NavInfo::clear_navlist() {
  navlist_.Clear();
}
inline const ::cloudbox::protobuf::navList& NavInfo::navlist(int index) const {
  return navlist_.Get(index);
}
inline ::cloudbox::protobuf::navList* NavInfo::mutable_navlist(int index) {
  return navlist_.Mutable(index);
}
inline ::cloudbox::protobuf::navList* NavInfo::add_navlist() {
  return navlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::navList >&
NavInfo::navlist() const {
  return navlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::navList >*
NavInfo::mutable_navlist() {
  return &navlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_navinfo_2eproto__INCLUDED
