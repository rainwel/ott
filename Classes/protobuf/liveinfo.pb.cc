// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: liveinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "liveinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

void protobuf_ShutdownFile_liveinfo_2eproto() {
  delete ProgramInfo::default_instance_;
  delete StationInfo::default_instance_;
  delete TagInfo::default_instance_;
  delete ProgramListInfo::default_instance_;
  delete StationListInfo::default_instance_;
  delete TagListInfo::default_instance_;
  delete StationTagInfo::default_instance_;
  delete StationTagList::default_instance_;
  delete LiveInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_liveinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_liveinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cloudbox::protobuf::protobuf_AddDesc_common_2eproto();
  ProgramInfo::default_instance_ = new ProgramInfo();
  StationInfo::default_instance_ = new StationInfo();
  TagInfo::default_instance_ = new TagInfo();
  ProgramListInfo::default_instance_ = new ProgramListInfo();
  StationListInfo::default_instance_ = new StationListInfo();
  TagListInfo::default_instance_ = new TagListInfo();
  StationTagInfo::default_instance_ = new StationTagInfo();
  StationTagList::default_instance_ = new StationTagList();
  LiveInfo::default_instance_ = new LiveInfo();
  ProgramInfo::default_instance_->InitAsDefaultInstance();
  StationInfo::default_instance_->InitAsDefaultInstance();
  TagInfo::default_instance_->InitAsDefaultInstance();
  ProgramListInfo::default_instance_->InitAsDefaultInstance();
  StationListInfo::default_instance_->InitAsDefaultInstance();
  TagListInfo::default_instance_->InitAsDefaultInstance();
  StationTagInfo::default_instance_->InitAsDefaultInstance();
  StationTagList::default_instance_->InitAsDefaultInstance();
  LiveInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_liveinfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_liveinfo_2eproto_once_);
void protobuf_AddDesc_liveinfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_liveinfo_2eproto_once_,
                 &protobuf_AddDesc_liveinfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_liveinfo_2eproto {
  StaticDescriptorInitializer_liveinfo_2eproto() {
    protobuf_AddDesc_liveinfo_2eproto();
  }
} static_descriptor_initializer_liveinfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ProgramInfo::kIdFieldNumber;
const int ProgramInfo::kStationFieldNumber;
const int ProgramInfo::kNameFieldNumber;
const int ProgramInfo::kStartFieldNumber;
const int ProgramInfo::kEndFieldNumber;
const int ProgramInfo::kStartTimestampFieldNumber;
const int ProgramInfo::kEndTimestampFieldNumber;
const int ProgramInfo::kIsHotFieldNumber;
const int ProgramInfo::kImgFieldNumber;
const int ProgramInfo::kCodeFieldNumber;
const int ProgramInfo::kStationNameFieldNumber;
const int ProgramInfo::kIconFieldNumber;
#endif  // !_MSC_VER

ProgramInfo::ProgramInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProgramInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  img_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  img_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  icon_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  icon_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
}

ProgramInfo::ProgramInfo(const ProgramInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProgramInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  station_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starttimestamp_ = 0;
  endtimestamp_ = 0;
  ishot_ = 0;
  img_ = NULL;
  code_ = 0;
  stationname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProgramInfo::~ProgramInfo() {
  SharedDtor();
}

void ProgramInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (station_ != &::google::protobuf::internal::kEmptyString) {
    delete station_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (start_ != &::google::protobuf::internal::kEmptyString) {
    delete start_;
  }
  if (end_ != &::google::protobuf::internal::kEmptyString) {
    delete end_;
  }
  if (stationname_ != &::google::protobuf::internal::kEmptyString) {
    delete stationname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete img_;
    delete icon_;
  }
}

void ProgramInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProgramInfo& ProgramInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_liveinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_liveinfo_2eproto();
#endif
  return *default_instance_;
}

ProgramInfo* ProgramInfo::default_instance_ = NULL;

ProgramInfo* ProgramInfo::New() const {
  return new ProgramInfo;
}

void ProgramInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_station()) {
      if (station_ != &::google::protobuf::internal::kEmptyString) {
        station_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_start()) {
      if (start_ != &::google::protobuf::internal::kEmptyString) {
        start_->clear();
      }
    }
    if (has_end()) {
      if (end_ != &::google::protobuf::internal::kEmptyString) {
        end_->clear();
      }
    }
    starttimestamp_ = 0;
    endtimestamp_ = 0;
    ishot_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_img()) {
      if (img_ != NULL) img_->::cloudbox::protobuf::ImageInfo::Clear();
    }
    code_ = 0;
    if (has_stationname()) {
      if (stationname_ != &::google::protobuf::internal::kEmptyString) {
        stationname_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != NULL) icon_->::cloudbox::protobuf::ImageInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ProgramInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_station;
        break;
      }

      // optional string station = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_station:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_station()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_start;
        break;
      }

      // optional string start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end;
        break;
      }

      // optional string end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_startTimestamp;
        break;
      }

      // optional int32 startTimestamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttimestamp_)));
          set_has_starttimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_endTimestamp;
        break;
      }

      // optional int32 endTimestamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTimestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtimestamp_)));
          set_has_endtimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isHot;
        break;
      }

      // optional int32 isHot = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishot_)));
          set_has_ishot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_img;
        break;
      }

      // optional .cloudbox.protobuf.ImageInfo img = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_code;
        break;
      }

      // optional int32 code = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_stationName;
        break;
      }

      // optional string stationName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stationname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_icon;
        break;
      }

      // optional .cloudbox.protobuf.ImageInfo icon = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProgramInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string station = 2;
  if (has_station()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->station(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->start(), output);
  }

  // optional string end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->end(), output);
  }

  // optional int32 startTimestamp = 6;
  if (has_starttimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->starttimestamp(), output);
  }

  // optional int32 endTimestamp = 7;
  if (has_endtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->endtimestamp(), output);
  }

  // optional int32 isHot = 8;
  if (has_ishot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ishot(), output);
  }

  // optional .cloudbox.protobuf.ImageInfo img = 9;
  if (has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->img(), output);
  }

  // optional int32 code = 10;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->code(), output);
  }

  // optional string stationName = 11;
  if (has_stationname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->stationname(), output);
  }

  // optional .cloudbox.protobuf.ImageInfo icon = 12;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->icon(), output);
  }

}

int ProgramInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string station = 2;
    if (has_station()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->station());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string start = 4;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start());
    }

    // optional string end = 5;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end());
    }

    // optional int32 startTimestamp = 6;
    if (has_starttimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttimestamp());
    }

    // optional int32 endTimestamp = 7;
    if (has_endtimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtimestamp());
    }

    // optional int32 isHot = 8;
    if (has_ishot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishot());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .cloudbox.protobuf.ImageInfo img = 9;
    if (has_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img());
    }

    // optional int32 code = 10;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string stationName = 11;
    if (has_stationname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stationname());
    }

    // optional .cloudbox.protobuf.ImageInfo icon = 12;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icon());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgramInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProgramInfo*>(&from));
}

void ProgramInfo::MergeFrom(const ProgramInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_station()) {
      set_station(from.station());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_starttimestamp()) {
      set_starttimestamp(from.starttimestamp());
    }
    if (from.has_endtimestamp()) {
      set_endtimestamp(from.endtimestamp());
    }
    if (from.has_ishot()) {
      set_ishot(from.ishot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_img()) {
      mutable_img()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.img());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_stationname()) {
      set_stationname(from.stationname());
    }
    if (from.has_icon()) {
      mutable_icon()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.icon());
    }
  }
}

void ProgramInfo::CopyFrom(const ProgramInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramInfo::IsInitialized() const {

  return true;
}

void ProgramInfo::Swap(ProgramInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(station_, other->station_);
    std::swap(name_, other->name_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(starttimestamp_, other->starttimestamp_);
    std::swap(endtimestamp_, other->endtimestamp_);
    std::swap(ishot_, other->ishot_);
    std::swap(img_, other->img_);
    std::swap(code_, other->code_);
    std::swap(stationname_, other->stationname_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProgramInfo::GetTypeName() const {
  return "cloudbox.protobuf.ProgramInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int StationInfo::kIdFieldNumber;
const int StationInfo::kCodeFieldNumber;
const int StationInfo::kNameFieldNumber;
const int StationInfo::kSitesFieldNumber;
const int StationInfo::kIconFieldNumber;
const int StationInfo::kTagsFieldNumber;
const int StationInfo::kProgramsFieldNumber;
#endif  // !_MSC_VER

StationInfo::StationInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StationInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  icon_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  icon_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
}

StationInfo::StationInfo(const StationInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StationInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationInfo::~StationInfo() {
  SharedDtor();
}

void StationInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete icon_;
  }
}

void StationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StationInfo& StationInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_liveinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_liveinfo_2eproto();
#endif
  return *default_instance_;
}

StationInfo* StationInfo::default_instance_ = NULL;

StationInfo* StationInfo::New() const {
  return new StationInfo;
}

void StationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    code_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != NULL) icon_->::cloudbox::protobuf::ImageInfo::Clear();
    }
  }
  sites_.Clear();
  tags_.Clear();
  programs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sites;
        break;
      }

      // repeated .cloudbox.protobuf.PlaySiteInfo sites = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sites:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sites()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sites;
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }

      // optional .cloudbox.protobuf.ImageInfo icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tags;
        break;
      }

      // repeated int32 tags = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_tags())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tags())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tags;
        if (input->ExpectTag(58)) goto parse_programs;
        break;
      }

      // repeated .cloudbox.protobuf.ProgramInfo programs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_programs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_programs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_programs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // repeated .cloudbox.protobuf.PlaySiteInfo sites = 4;
  for (int i = 0; i < this->sites_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->sites(i), output);
  }

  // optional .cloudbox.protobuf.ImageInfo icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->icon(), output);
  }

  // repeated int32 tags = 6;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->tags(i), output);
  }

  // repeated .cloudbox.protobuf.ProgramInfo programs = 7;
  for (int i = 0; i < this->programs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->programs(i), output);
  }

}

int StationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .cloudbox.protobuf.ImageInfo icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icon());
    }

  }
  // repeated .cloudbox.protobuf.PlaySiteInfo sites = 4;
  total_size += 1 * this->sites_size();
  for (int i = 0; i < this->sites_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sites(i));
  }

  // repeated int32 tags = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->tags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->tags(i));
    }
    total_size += 1 * this->tags_size() + data_size;
  }

  // repeated .cloudbox.protobuf.ProgramInfo programs = 7;
  total_size += 1 * this->programs_size();
  for (int i = 0; i < this->programs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->programs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StationInfo*>(&from));
}

void StationInfo::MergeFrom(const StationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  sites_.MergeFrom(from.sites_);
  tags_.MergeFrom(from.tags_);
  programs_.MergeFrom(from.programs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      mutable_icon()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.icon());
    }
  }
}

void StationInfo::CopyFrom(const StationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationInfo::IsInitialized() const {

  return true;
}

void StationInfo::Swap(StationInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(code_, other->code_);
    std::swap(name_, other->name_);
    sites_.Swap(&other->sites_);
    std::swap(icon_, other->icon_);
    tags_.Swap(&other->tags_);
    programs_.Swap(&other->programs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StationInfo::GetTypeName() const {
  return "cloudbox.protobuf.StationInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int TagInfo::kCodeFieldNumber;
const int TagInfo::kNameFieldNumber;
#endif  // !_MSC_VER

TagInfo::TagInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TagInfo::InitAsDefaultInstance() {
}

TagInfo::TagInfo(const TagInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TagInfo::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagInfo::~TagInfo() {
  SharedDtor();
}

void TagInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TagInfo& TagInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_liveinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_liveinfo_2eproto();
#endif
  return *default_instance_;
}

TagInfo* TagInfo::default_instance_ = NULL;

TagInfo* TagInfo::New() const {
  return new TagInfo;
}

void TagInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

}

int TagInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TagInfo*>(&from));
}

void TagInfo::MergeFrom(const TagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void TagInfo::CopyFrom(const TagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagInfo::IsInitialized() const {

  return true;
}

void TagInfo::Swap(TagInfo* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TagInfo::GetTypeName() const {
  return "cloudbox.protobuf.TagInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ProgramListInfo::kTotalFieldNumber;
const int ProgramListInfo::kResultFieldNumber;
#endif  // !_MSC_VER

ProgramListInfo::ProgramListInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProgramListInfo::InitAsDefaultInstance() {
}

ProgramListInfo::ProgramListInfo(const ProgramListInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProgramListInfo::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProgramListInfo::~ProgramListInfo() {
  SharedDtor();
}

void ProgramListInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ProgramListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProgramListInfo& ProgramListInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_liveinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_liveinfo_2eproto();
#endif
  return *default_instance_;
}

ProgramListInfo* ProgramListInfo::default_instance_ = NULL;

ProgramListInfo* ProgramListInfo::New() const {
  return new ProgramListInfo;
}

void ProgramListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ProgramListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .cloudbox.protobuf.ProgramInfo result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProgramListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // repeated .cloudbox.protobuf.ProgramInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->result(i), output);
  }

}

int ProgramListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  // repeated .cloudbox.protobuf.ProgramInfo result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgramListInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProgramListInfo*>(&from));
}

void ProgramListInfo::MergeFrom(const ProgramListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
  }
}

void ProgramListInfo::CopyFrom(const ProgramListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramListInfo::IsInitialized() const {

  return true;
}

void ProgramListInfo::Swap(ProgramListInfo* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProgramListInfo::GetTypeName() const {
  return "cloudbox.protobuf.ProgramListInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int StationListInfo::kTotalFieldNumber;
const int StationListInfo::kResultFieldNumber;
#endif  // !_MSC_VER

StationListInfo::StationListInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StationListInfo::InitAsDefaultInstance() {
}

StationListInfo::StationListInfo(const StationListInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StationListInfo::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationListInfo::~StationListInfo() {
  SharedDtor();
}

void StationListInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StationListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StationListInfo& StationListInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_liveinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_liveinfo_2eproto();
#endif
  return *default_instance_;
}

StationListInfo* StationListInfo::default_instance_ = NULL;

StationListInfo* StationListInfo::New() const {
  return new StationListInfo;
}

void StationListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StationListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .cloudbox.protobuf.StationInfo result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // repeated .cloudbox.protobuf.StationInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->result(i), output);
  }

}

int StationListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  // repeated .cloudbox.protobuf.StationInfo result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationListInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StationListInfo*>(&from));
}

void StationListInfo::MergeFrom(const StationListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
  }
}

void StationListInfo::CopyFrom(const StationListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationListInfo::IsInitialized() const {

  return true;
}

void StationListInfo::Swap(StationListInfo* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StationListInfo::GetTypeName() const {
  return "cloudbox.protobuf.StationListInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int TagListInfo::kTotalFieldNumber;
const int TagListInfo::kResultFieldNumber;
#endif  // !_MSC_VER

TagListInfo::TagListInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TagListInfo::InitAsDefaultInstance() {
}

TagListInfo::TagListInfo(const TagListInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TagListInfo::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TagListInfo::~TagListInfo() {
  SharedDtor();
}

void TagListInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TagListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TagListInfo& TagListInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_liveinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_liveinfo_2eproto();
#endif
  return *default_instance_;
}

TagListInfo* TagListInfo::default_instance_ = NULL;

TagListInfo* TagListInfo::New() const {
  return new TagListInfo;
}

void TagListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TagListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .cloudbox.protobuf.TagInfo result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TagListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // repeated .cloudbox.protobuf.TagInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->result(i), output);
  }

}

int TagListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  // repeated .cloudbox.protobuf.TagInfo result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TagListInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TagListInfo*>(&from));
}

void TagListInfo::MergeFrom(const TagListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
  }
}

void TagListInfo::CopyFrom(const TagListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagListInfo::IsInitialized() const {

  return true;
}

void TagListInfo::Swap(TagListInfo* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TagListInfo::GetTypeName() const {
  return "cloudbox.protobuf.TagListInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int StationTagInfo::kTagFieldNumber;
const int StationTagInfo::kStationsFieldNumber;
#endif  // !_MSC_VER

StationTagInfo::StationTagInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StationTagInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tag_ = const_cast< ::cloudbox::protobuf::TagInfo*>(
      ::cloudbox::protobuf::TagInfo::internal_default_instance());
#else
  tag_ = const_cast< ::cloudbox::protobuf::TagInfo*>(&::cloudbox::protobuf::TagInfo::default_instance());
#endif
}

StationTagInfo::StationTagInfo(const StationTagInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StationTagInfo::SharedCtor() {
  _cached_size_ = 0;
  tag_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationTagInfo::~StationTagInfo() {
  SharedDtor();
}

void StationTagInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete tag_;
  }
}

void StationTagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StationTagInfo& StationTagInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_liveinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_liveinfo_2eproto();
#endif
  return *default_instance_;
}

StationTagInfo* StationTagInfo::default_instance_ = NULL;

StationTagInfo* StationTagInfo::New() const {
  return new StationTagInfo;
}

void StationTagInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tag()) {
      if (tag_ != NULL) tag_->::cloudbox::protobuf::TagInfo::Clear();
    }
  }
  stations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StationTagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cloudbox.protobuf.TagInfo tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stations;
        break;
      }

      // repeated .cloudbox.protobuf.StationInfo stations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationTagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cloudbox.protobuf.TagInfo tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->tag(), output);
  }

  // repeated .cloudbox.protobuf.StationInfo stations = 2;
  for (int i = 0; i < this->stations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->stations(i), output);
  }

}

int StationTagInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cloudbox.protobuf.TagInfo tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tag());
    }

  }
  // repeated .cloudbox.protobuf.StationInfo stations = 2;
  total_size += 1 * this->stations_size();
  for (int i = 0; i < this->stations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stations(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationTagInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StationTagInfo*>(&from));
}

void StationTagInfo::MergeFrom(const StationTagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stations_.MergeFrom(from.stations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      mutable_tag()->::cloudbox::protobuf::TagInfo::MergeFrom(from.tag());
    }
  }
}

void StationTagInfo::CopyFrom(const StationTagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationTagInfo::IsInitialized() const {

  return true;
}

void StationTagInfo::Swap(StationTagInfo* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    stations_.Swap(&other->stations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StationTagInfo::GetTypeName() const {
  return "cloudbox.protobuf.StationTagInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int StationTagList::kTotalFieldNumber;
const int StationTagList::kResultFieldNumber;
#endif  // !_MSC_VER

StationTagList::StationTagList()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StationTagList::InitAsDefaultInstance() {
}

StationTagList::StationTagList(const StationTagList& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StationTagList::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StationTagList::~StationTagList() {
  SharedDtor();
}

void StationTagList::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StationTagList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StationTagList& StationTagList::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_liveinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_liveinfo_2eproto();
#endif
  return *default_instance_;
}

StationTagList* StationTagList::default_instance_ = NULL;

StationTagList* StationTagList::New() const {
  return new StationTagList;
}

void StationTagList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StationTagList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .cloudbox.protobuf.StationTagInfo result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StationTagList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // repeated .cloudbox.protobuf.StationTagInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->result(i), output);
  }

}

int StationTagList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  // repeated .cloudbox.protobuf.StationTagInfo result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StationTagList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StationTagList*>(&from));
}

void StationTagList::MergeFrom(const StationTagList& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
  }
}

void StationTagList::CopyFrom(const StationTagList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationTagList::IsInitialized() const {

  return true;
}

void StationTagList::Swap(StationTagList* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StationTagList::GetTypeName() const {
  return "cloudbox.protobuf.StationTagList";
}


// ===================================================================

#ifndef _MSC_VER
const int LiveInfo::kHotProgramsFieldNumber;
const int LiveInfo::kStationsFieldNumber;
const int LiveInfo::kTagsFieldNumber;
#endif  // !_MSC_VER

LiveInfo::LiveInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LiveInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hotprograms_ = const_cast< ::cloudbox::protobuf::ProgramListInfo*>(
      ::cloudbox::protobuf::ProgramListInfo::internal_default_instance());
#else
  hotprograms_ = const_cast< ::cloudbox::protobuf::ProgramListInfo*>(&::cloudbox::protobuf::ProgramListInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stations_ = const_cast< ::cloudbox::protobuf::StationListInfo*>(
      ::cloudbox::protobuf::StationListInfo::internal_default_instance());
#else
  stations_ = const_cast< ::cloudbox::protobuf::StationListInfo*>(&::cloudbox::protobuf::StationListInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tags_ = const_cast< ::cloudbox::protobuf::TagListInfo*>(
      ::cloudbox::protobuf::TagListInfo::internal_default_instance());
#else
  tags_ = const_cast< ::cloudbox::protobuf::TagListInfo*>(&::cloudbox::protobuf::TagListInfo::default_instance());
#endif
}

LiveInfo::LiveInfo(const LiveInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LiveInfo::SharedCtor() {
  _cached_size_ = 0;
  hotprograms_ = NULL;
  stations_ = NULL;
  tags_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LiveInfo::~LiveInfo() {
  SharedDtor();
}

void LiveInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete hotprograms_;
    delete stations_;
    delete tags_;
  }
}

void LiveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LiveInfo& LiveInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_liveinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_liveinfo_2eproto();
#endif
  return *default_instance_;
}

LiveInfo* LiveInfo::default_instance_ = NULL;

LiveInfo* LiveInfo::New() const {
  return new LiveInfo;
}

void LiveInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hotprograms()) {
      if (hotprograms_ != NULL) hotprograms_->::cloudbox::protobuf::ProgramListInfo::Clear();
    }
    if (has_stations()) {
      if (stations_ != NULL) stations_->::cloudbox::protobuf::StationListInfo::Clear();
    }
    if (has_tags()) {
      if (tags_ != NULL) tags_->::cloudbox::protobuf::TagListInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LiveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cloudbox.protobuf.ProgramListInfo hotPrograms = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hotprograms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stations;
        break;
      }

      // optional .cloudbox.protobuf.StationListInfo stations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tags;
        break;
      }

      // optional .cloudbox.protobuf.TagListInfo tags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LiveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cloudbox.protobuf.ProgramListInfo hotPrograms = 1;
  if (has_hotprograms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->hotprograms(), output);
  }

  // optional .cloudbox.protobuf.StationListInfo stations = 2;
  if (has_stations()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->stations(), output);
  }

  // optional .cloudbox.protobuf.TagListInfo tags = 3;
  if (has_tags()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->tags(), output);
  }

}

int LiveInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cloudbox.protobuf.ProgramListInfo hotPrograms = 1;
    if (has_hotprograms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hotprograms());
    }

    // optional .cloudbox.protobuf.StationListInfo stations = 2;
    if (has_stations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stations());
    }

    // optional .cloudbox.protobuf.TagListInfo tags = 3;
    if (has_tags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tags());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LiveInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LiveInfo*>(&from));
}

void LiveInfo::MergeFrom(const LiveInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hotprograms()) {
      mutable_hotprograms()->::cloudbox::protobuf::ProgramListInfo::MergeFrom(from.hotprograms());
    }
    if (from.has_stations()) {
      mutable_stations()->::cloudbox::protobuf::StationListInfo::MergeFrom(from.stations());
    }
    if (from.has_tags()) {
      mutable_tags()->::cloudbox::protobuf::TagListInfo::MergeFrom(from.tags());
    }
  }
}

void LiveInfo::CopyFrom(const LiveInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LiveInfo::IsInitialized() const {

  return true;
}

void LiveInfo::Swap(LiveInfo* other) {
  if (other != this) {
    std::swap(hotprograms_, other->hotprograms_);
    std::swap(stations_, other->stations_);
    std::swap(tags_, other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LiveInfo::GetTypeName() const {
  return "cloudbox.protobuf.LiveInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)
