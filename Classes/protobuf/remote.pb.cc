// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "remote.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

void protobuf_ShutdownFile_remote_2eproto() {
  delete Remote::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_remote_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_remote_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cloudbox::protobuf::protobuf_AddDesc_common_2eproto();
  Remote::default_instance_ = new Remote();
  Remote::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_remote_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_remote_2eproto_once_);
void protobuf_AddDesc_remote_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_remote_2eproto_once_,
                 &protobuf_AddDesc_remote_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_remote_2eproto {
  StaticDescriptorInitializer_remote_2eproto() {
    protobuf_AddDesc_remote_2eproto();
  }
} static_descriptor_initializer_remote_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Remote::kCodeFieldNumber;
const int Remote::kHelpimgFieldNumber;
const int Remote::kWeixinFieldNumber;
const int Remote::kHelpimgWidthFieldNumber;
const int Remote::kHelpimgHeightFieldNumber;
const int Remote::kWeixinWidthFieldNumber;
const int Remote::kWeixinHeightFieldNumber;
#endif  // !_MSC_VER

Remote::Remote()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Remote::InitAsDefaultInstance() {
}

Remote::Remote(const Remote& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Remote::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  helpimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weixin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  helpimg_width_ = 0;
  helpimg_height_ = 0;
  weixin_width_ = 0;
  weixin_height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Remote::~Remote() {
  SharedDtor();
}

void Remote::SharedDtor() {
  if (helpimg_ != &::google::protobuf::internal::kEmptyString) {
    delete helpimg_;
  }
  if (weixin_ != &::google::protobuf::internal::kEmptyString) {
    delete weixin_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Remote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Remote& Remote::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_remote_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_remote_2eproto();
#endif
  return *default_instance_;
}

Remote* Remote::default_instance_ = NULL;

Remote* Remote::New() const {
  return new Remote;
}

void Remote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    if (has_helpimg()) {
      if (helpimg_ != &::google::protobuf::internal::kEmptyString) {
        helpimg_->clear();
      }
    }
    if (has_weixin()) {
      if (weixin_ != &::google::protobuf::internal::kEmptyString) {
        weixin_->clear();
      }
    }
    helpimg_width_ = 0;
    helpimg_height_ = 0;
    weixin_width_ = 0;
    weixin_height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Remote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_helpimg;
        break;
      }

      // optional string helpimg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helpimg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_helpimg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weixin;
        break;
      }

      // optional string weixin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weixin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weixin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_helpimg_width;
        break;
      }

      // optional int32 helpimg_width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpimg_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpimg_width_)));
          set_has_helpimg_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_helpimg_height;
        break;
      }

      // optional int32 helpimg_height = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpimg_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpimg_height_)));
          set_has_helpimg_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_weixin_width;
        break;
      }

      // optional int32 weixin_width = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weixin_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weixin_width_)));
          set_has_weixin_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_weixin_height;
        break;
      }

      // optional int32 weixin_height = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weixin_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weixin_height_)));
          set_has_weixin_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Remote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string helpimg = 2;
  if (has_helpimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->helpimg(), output);
  }

  // optional string weixin = 3;
  if (has_weixin()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->weixin(), output);
  }

  // optional int32 helpimg_width = 4;
  if (has_helpimg_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->helpimg_width(), output);
  }

  // optional int32 helpimg_height = 5;
  if (has_helpimg_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->helpimg_height(), output);
  }

  // optional int32 weixin_width = 6;
  if (has_weixin_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->weixin_width(), output);
  }

  // optional int32 weixin_height = 7;
  if (has_weixin_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->weixin_height(), output);
  }

}

int Remote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string helpimg = 2;
    if (has_helpimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->helpimg());
    }

    // optional string weixin = 3;
    if (has_weixin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weixin());
    }

    // optional int32 helpimg_width = 4;
    if (has_helpimg_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpimg_width());
    }

    // optional int32 helpimg_height = 5;
    if (has_helpimg_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpimg_height());
    }

    // optional int32 weixin_width = 6;
    if (has_weixin_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weixin_width());
    }

    // optional int32 weixin_height = 7;
    if (has_weixin_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weixin_height());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Remote::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Remote*>(&from));
}

void Remote::MergeFrom(const Remote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_helpimg()) {
      set_helpimg(from.helpimg());
    }
    if (from.has_weixin()) {
      set_weixin(from.weixin());
    }
    if (from.has_helpimg_width()) {
      set_helpimg_width(from.helpimg_width());
    }
    if (from.has_helpimg_height()) {
      set_helpimg_height(from.helpimg_height());
    }
    if (from.has_weixin_width()) {
      set_weixin_width(from.weixin_width());
    }
    if (from.has_weixin_height()) {
      set_weixin_height(from.weixin_height());
    }
  }
}

void Remote::CopyFrom(const Remote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Remote::IsInitialized() const {

  return true;
}

void Remote::Swap(Remote* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(helpimg_, other->helpimg_);
    std::swap(weixin_, other->weixin_);
    std::swap(helpimg_width_, other->helpimg_width_);
    std::swap(helpimg_height_, other->helpimg_height_);
    std::swap(weixin_width_, other->weixin_width_);
    std::swap(weixin_height_, other->weixin_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Remote::GetTypeName() const {
  return "cloudbox.protobuf.Remote";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)
