// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: searchinfo_response.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "searchinfo_response.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

void protobuf_ShutdownFile_searchinfo_5fresponse_2eproto() {
  delete FilterInfo::default_instance_;
  delete SearchInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_searchinfo_5fresponse_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_searchinfo_5fresponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cloudbox::protobuf::protobuf_AddDesc_common_2eproto();
  FilterInfo::default_instance_ = new FilterInfo();
  SearchInfo::default_instance_ = new SearchInfo();
  FilterInfo::default_instance_->InitAsDefaultInstance();
  SearchInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_searchinfo_5fresponse_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_searchinfo_5fresponse_2eproto_once_);
void protobuf_AddDesc_searchinfo_5fresponse_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_searchinfo_5fresponse_2eproto_once_,
                 &protobuf_AddDesc_searchinfo_5fresponse_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_searchinfo_5fresponse_2eproto {
  StaticDescriptorInitializer_searchinfo_5fresponse_2eproto() {
    protobuf_AddDesc_searchinfo_5fresponse_2eproto();
  }
} static_descriptor_initializer_searchinfo_5fresponse_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int FilterInfo::kTotalFieldNumber;
const int FilterInfo::kResultFieldNumber;
#endif  // !_MSC_VER

FilterInfo::FilterInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FilterInfo::InitAsDefaultInstance() {
}

FilterInfo::FilterInfo(const FilterInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FilterInfo::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FilterInfo::~FilterInfo() {
  SharedDtor();
}

void FilterInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FilterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FilterInfo& FilterInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_searchinfo_5fresponse_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_searchinfo_5fresponse_2eproto();
#endif
  return *default_instance_;
}

FilterInfo* FilterInfo::default_instance_ = NULL;

FilterInfo* FilterInfo::New() const {
  return new FilterInfo;
}

void FilterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FilterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // repeated .cloudbox.protobuf.BoxInfo result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FilterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // repeated .cloudbox.protobuf.BoxInfo result = 2;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->result(i), output);
  }

}

int FilterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  // repeated .cloudbox.protobuf.BoxInfo result = 2;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilterInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FilterInfo*>(&from));
}

void FilterInfo::MergeFrom(const FilterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
  }
}

void FilterInfo::CopyFrom(const FilterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterInfo::IsInitialized() const {

  return true;
}

void FilterInfo::Swap(FilterInfo* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FilterInfo::GetTypeName() const {
  return "cloudbox.protobuf.FilterInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SearchInfo::kTitleFieldNumber;
const int SearchInfo::kTotalFieldNumber;
const int SearchInfo::kResultFieldNumber;
const int SearchInfo::kSubtitleFieldNumber;
const int SearchInfo::kOffsetYFieldNumber;
const int SearchInfo::kBackgroundFieldNumber;
const int SearchInfo::kFiltersFieldNumber;
const int SearchInfo::kFooterButtonsFieldNumber;
const int SearchInfo::kIdFieldNumber;
const int SearchInfo::kBookmarkButtonsFieldNumber;
const int SearchInfo::kPnameFieldNumber;
const int SearchInfo::kPtitleFieldNumber;
const int SearchInfo::kPdescFieldNumber;
const int SearchInfo::kPgenderFieldNumber;
const int SearchInfo::kSpacingFieldNumber;
const int SearchInfo::kBackgroundClipFieldNumber;
const int SearchInfo::kBackgroundClipXFieldNumber;
const int SearchInfo::kBackgroundClipYFieldNumber;
const int SearchInfo::kBoxWidthFieldNumber;
const int SearchInfo::kBoxHeightFieldNumber;
const int SearchInfo::kOffsetXFieldNumber;
#endif  // !_MSC_VER

SearchInfo::SearchInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SearchInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  background_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  background_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  filters_ = const_cast< ::cloudbox::protobuf::FilterInfo*>(
      ::cloudbox::protobuf::FilterInfo::internal_default_instance());
#else
  filters_ = const_cast< ::cloudbox::protobuf::FilterInfo*>(&::cloudbox::protobuf::FilterInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  backgroundclip_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  backgroundclip_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
}

SearchInfo::SearchInfo(const SearchInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SearchInfo::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_ = 0;
  subtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offsety_ = 0;
  background_ = NULL;
  filters_ = NULL;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ptitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pgender_ = 0;
  spacing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundclip_ = NULL;
  backgroundclipx_ = 0;
  backgroundclipy_ = 0;
  boxwidth_ = 0;
  boxheight_ = 0;
  offsetx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchInfo::~SearchInfo() {
  SharedDtor();
}

void SearchInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (subtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete subtitle_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (pname_ != &::google::protobuf::internal::kEmptyString) {
    delete pname_;
  }
  if (ptitle_ != &::google::protobuf::internal::kEmptyString) {
    delete ptitle_;
  }
  if (pdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete pdesc_;
  }
  if (spacing_ != &::google::protobuf::internal::kEmptyString) {
    delete spacing_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete background_;
    delete filters_;
    delete backgroundclip_;
  }
}

void SearchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SearchInfo& SearchInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_searchinfo_5fresponse_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_searchinfo_5fresponse_2eproto();
#endif
  return *default_instance_;
}

SearchInfo* SearchInfo::default_instance_ = NULL;

SearchInfo* SearchInfo::New() const {
  return new SearchInfo;
}

void SearchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    total_ = 0;
    if (has_subtitle()) {
      if (subtitle_ != &::google::protobuf::internal::kEmptyString) {
        subtitle_->clear();
      }
    }
    offsety_ = 0;
    if (has_background()) {
      if (background_ != NULL) background_->::cloudbox::protobuf::ImageInfo::Clear();
    }
    if (has_filters()) {
      if (filters_ != NULL) filters_->::cloudbox::protobuf::FilterInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_pname()) {
      if (pname_ != &::google::protobuf::internal::kEmptyString) {
        pname_->clear();
      }
    }
    if (has_ptitle()) {
      if (ptitle_ != &::google::protobuf::internal::kEmptyString) {
        ptitle_->clear();
      }
    }
    if (has_pdesc()) {
      if (pdesc_ != &::google::protobuf::internal::kEmptyString) {
        pdesc_->clear();
      }
    }
    pgender_ = 0;
    if (has_spacing()) {
      if (spacing_ != &::google::protobuf::internal::kEmptyString) {
        spacing_->clear();
      }
    }
    if (has_backgroundclip()) {
      if (backgroundclip_ != NULL) backgroundclip_->::cloudbox::protobuf::ImageInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    backgroundclipx_ = 0;
    backgroundclipy_ = 0;
    boxwidth_ = 0;
    boxheight_ = 0;
    offsetx_ = 0;
  }
  result_.Clear();
  footerbuttons_.Clear();
  bookmarkbuttons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SearchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // optional int32 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // repeated .cloudbox.protobuf.BoxInfo result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        if (input->ExpectTag(34)) goto parse_subtitle;
        break;
      }

      // optional string subtitle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subtitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtitle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_offsetY;
        break;
      }

      // optional float offsetY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsety_)));
          set_has_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_background;
        break;
      }

      // optional .cloudbox.protobuf.ImageInfo background = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_background:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_background()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_filters;
        break;
      }

      // optional .cloudbox.protobuf.FilterInfo filters = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_footerButtons;
        break;
      }

      // repeated .cloudbox.protobuf.BoxInfo footerButtons = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footerButtons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_footerbuttons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_footerButtons;
        if (input->ExpectTag(74)) goto parse_id;
        break;
      }

      // optional string id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bookmarkButtons;
        break;
      }

      // repeated .cloudbox.protobuf.BoxInfo bookmarkButtons = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bookmarkButtons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bookmarkbuttons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bookmarkButtons;
        if (input->ExpectTag(90)) goto parse_pname;
        break;
      }

      // optional string pname = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ptitle;
        break;
      }

      // optional string ptitle = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ptitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ptitle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_pdesc;
        break;
      }

      // optional string pdesc = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pdesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_pgender;
        break;
      }

      // optional int32 pgender = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pgender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pgender_)));
          set_has_pgender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_spacing;
        break;
      }

      // optional string spacing = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spacing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spacing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_backgroundClip;
        break;
      }

      // optional .cloudbox.protobuf.ImageInfo backgroundClip = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backgroundClip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundclip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_backgroundClipX;
        break;
      }

      // optional int32 backgroundClipX = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backgroundClipX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backgroundclipx_)));
          set_has_backgroundclipx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_backgroundClipY;
        break;
      }

      // optional int32 backgroundClipY = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backgroundClipY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backgroundclipy_)));
          set_has_backgroundclipy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_boxWidth;
        break;
      }

      // optional int32 boxWidth = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxwidth_)));
          set_has_boxwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_boxHeight;
        break;
      }

      // optional int32 boxHeight = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxheight_)));
          set_has_boxheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_offsetX;
        break;
      }

      // optional float offsetX = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // optional int32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  // repeated .cloudbox.protobuf.BoxInfo result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->result(i), output);
  }

  // optional string subtitle = 4;
  if (has_subtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->subtitle(), output);
  }

  // optional float offsetY = 5;
  if (has_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->offsety(), output);
  }

  // optional .cloudbox.protobuf.ImageInfo background = 6;
  if (has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->background(), output);
  }

  // optional .cloudbox.protobuf.FilterInfo filters = 7;
  if (has_filters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->filters(), output);
  }

  // repeated .cloudbox.protobuf.BoxInfo footerButtons = 8;
  for (int i = 0; i < this->footerbuttons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->footerbuttons(i), output);
  }

  // optional string id = 9;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->id(), output);
  }

  // repeated .cloudbox.protobuf.BoxInfo bookmarkButtons = 10;
  for (int i = 0; i < this->bookmarkbuttons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->bookmarkbuttons(i), output);
  }

  // optional string pname = 11;
  if (has_pname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->pname(), output);
  }

  // optional string ptitle = 12;
  if (has_ptitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->ptitle(), output);
  }

  // optional string pdesc = 13;
  if (has_pdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->pdesc(), output);
  }

  // optional int32 pgender = 14;
  if (has_pgender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pgender(), output);
  }

  // optional string spacing = 15;
  if (has_spacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->spacing(), output);
  }

  // optional .cloudbox.protobuf.ImageInfo backgroundClip = 16;
  if (has_backgroundclip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->backgroundclip(), output);
  }

  // optional int32 backgroundClipX = 17;
  if (has_backgroundclipx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->backgroundclipx(), output);
  }

  // optional int32 backgroundClipY = 18;
  if (has_backgroundclipy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->backgroundclipy(), output);
  }

  // optional int32 boxWidth = 19;
  if (has_boxwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->boxwidth(), output);
  }

  // optional int32 boxHeight = 20;
  if (has_boxheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->boxheight(), output);
  }

  // optional float offsetX = 21;
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->offsetx(), output);
  }

}

int SearchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional string subtitle = 4;
    if (has_subtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtitle());
    }

    // optional float offsetY = 5;
    if (has_offsety()) {
      total_size += 1 + 4;
    }

    // optional .cloudbox.protobuf.ImageInfo background = 6;
    if (has_background()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->background());
    }

    // optional .cloudbox.protobuf.FilterInfo filters = 7;
    if (has_filters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filters());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string id = 9;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string pname = 11;
    if (has_pname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pname());
    }

    // optional string ptitle = 12;
    if (has_ptitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ptitle());
    }

    // optional string pdesc = 13;
    if (has_pdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pdesc());
    }

    // optional int32 pgender = 14;
    if (has_pgender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pgender());
    }

    // optional string spacing = 15;
    if (has_spacing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spacing());
    }

    // optional .cloudbox.protobuf.ImageInfo backgroundClip = 16;
    if (has_backgroundclip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgroundclip());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 backgroundClipX = 17;
    if (has_backgroundclipx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backgroundclipx());
    }

    // optional int32 backgroundClipY = 18;
    if (has_backgroundclipy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backgroundclipy());
    }

    // optional int32 boxWidth = 19;
    if (has_boxwidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxwidth());
    }

    // optional int32 boxHeight = 20;
    if (has_boxheight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxheight());
    }

    // optional float offsetX = 21;
    if (has_offsetx()) {
      total_size += 2 + 4;
    }

  }
  // repeated .cloudbox.protobuf.BoxInfo result = 3;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  // repeated .cloudbox.protobuf.BoxInfo footerButtons = 8;
  total_size += 1 * this->footerbuttons_size();
  for (int i = 0; i < this->footerbuttons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->footerbuttons(i));
  }

  // repeated .cloudbox.protobuf.BoxInfo bookmarkButtons = 10;
  total_size += 1 * this->bookmarkbuttons_size();
  for (int i = 0; i < this->bookmarkbuttons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bookmarkbuttons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SearchInfo*>(&from));
}

void SearchInfo::MergeFrom(const SearchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  footerbuttons_.MergeFrom(from.footerbuttons_);
  bookmarkbuttons_.MergeFrom(from.bookmarkbuttons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_subtitle()) {
      set_subtitle(from.subtitle());
    }
    if (from.has_offsety()) {
      set_offsety(from.offsety());
    }
    if (from.has_background()) {
      mutable_background()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.background());
    }
    if (from.has_filters()) {
      mutable_filters()->::cloudbox::protobuf::FilterInfo::MergeFrom(from.filters());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pname()) {
      set_pname(from.pname());
    }
    if (from.has_ptitle()) {
      set_ptitle(from.ptitle());
    }
    if (from.has_pdesc()) {
      set_pdesc(from.pdesc());
    }
    if (from.has_pgender()) {
      set_pgender(from.pgender());
    }
    if (from.has_spacing()) {
      set_spacing(from.spacing());
    }
    if (from.has_backgroundclip()) {
      mutable_backgroundclip()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.backgroundclip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_backgroundclipx()) {
      set_backgroundclipx(from.backgroundclipx());
    }
    if (from.has_backgroundclipy()) {
      set_backgroundclipy(from.backgroundclipy());
    }
    if (from.has_boxwidth()) {
      set_boxwidth(from.boxwidth());
    }
    if (from.has_boxheight()) {
      set_boxheight(from.boxheight());
    }
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
  }
}

void SearchInfo::CopyFrom(const SearchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchInfo::IsInitialized() const {

  return true;
}

void SearchInfo::Swap(SearchInfo* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(total_, other->total_);
    result_.Swap(&other->result_);
    std::swap(subtitle_, other->subtitle_);
    std::swap(offsety_, other->offsety_);
    std::swap(background_, other->background_);
    std::swap(filters_, other->filters_);
    footerbuttons_.Swap(&other->footerbuttons_);
    std::swap(id_, other->id_);
    bookmarkbuttons_.Swap(&other->bookmarkbuttons_);
    std::swap(pname_, other->pname_);
    std::swap(ptitle_, other->ptitle_);
    std::swap(pdesc_, other->pdesc_);
    std::swap(pgender_, other->pgender_);
    std::swap(spacing_, other->spacing_);
    std::swap(backgroundclip_, other->backgroundclip_);
    std::swap(backgroundclipx_, other->backgroundclipx_);
    std::swap(backgroundclipy_, other->backgroundclipy_);
    std::swap(boxwidth_, other->boxwidth_);
    std::swap(boxheight_, other->boxheight_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SearchInfo::GetTypeName() const {
  return "cloudbox.protobuf.SearchInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)
