// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote.proto

#ifndef PROTOBUF_remote_2eproto__INCLUDED
#define PROTOBUF_remote_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_remote_2eproto();
void protobuf_AssignDesc_remote_2eproto();
void protobuf_ShutdownFile_remote_2eproto();

class Remote;

// ===================================================================

class Remote : public ::google::protobuf::MessageLite {
 public:
  Remote();
  virtual ~Remote();

  Remote(const Remote& from);

  inline Remote& operator=(const Remote& from) {
    CopyFrom(from);
    return *this;
  }

  static const Remote& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Remote* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Remote* other);

  // implements Message ----------------------------------------------

  Remote* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Remote& from);
  void MergeFrom(const Remote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional string helpimg = 2;
  inline bool has_helpimg() const;
  inline void clear_helpimg();
  static const int kHelpimgFieldNumber = 2;
  inline const ::std::string& helpimg() const;
  inline void set_helpimg(const ::std::string& value);
  inline void set_helpimg(const char* value);
  inline void set_helpimg(const char* value, size_t size);
  inline ::std::string* mutable_helpimg();
  inline ::std::string* release_helpimg();
  inline void set_allocated_helpimg(::std::string* helpimg);

  // optional string weixin = 3;
  inline bool has_weixin() const;
  inline void clear_weixin();
  static const int kWeixinFieldNumber = 3;
  inline const ::std::string& weixin() const;
  inline void set_weixin(const ::std::string& value);
  inline void set_weixin(const char* value);
  inline void set_weixin(const char* value, size_t size);
  inline ::std::string* mutable_weixin();
  inline ::std::string* release_weixin();
  inline void set_allocated_weixin(::std::string* weixin);

  // optional int32 helpimg_width = 4;
  inline bool has_helpimg_width() const;
  inline void clear_helpimg_width();
  static const int kHelpimgWidthFieldNumber = 4;
  inline ::google::protobuf::int32 helpimg_width() const;
  inline void set_helpimg_width(::google::protobuf::int32 value);

  // optional int32 helpimg_height = 5;
  inline bool has_helpimg_height() const;
  inline void clear_helpimg_height();
  static const int kHelpimgHeightFieldNumber = 5;
  inline ::google::protobuf::int32 helpimg_height() const;
  inline void set_helpimg_height(::google::protobuf::int32 value);

  // optional int32 weixin_width = 6;
  inline bool has_weixin_width() const;
  inline void clear_weixin_width();
  static const int kWeixinWidthFieldNumber = 6;
  inline ::google::protobuf::int32 weixin_width() const;
  inline void set_weixin_width(::google::protobuf::int32 value);

  // optional int32 weixin_height = 7;
  inline bool has_weixin_height() const;
  inline void clear_weixin_height();
  static const int kWeixinHeightFieldNumber = 7;
  inline ::google::protobuf::int32 weixin_height() const;
  inline void set_weixin_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cloudbox.protobuf.Remote)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_helpimg();
  inline void clear_has_helpimg();
  inline void set_has_weixin();
  inline void clear_has_weixin();
  inline void set_has_helpimg_width();
  inline void clear_has_helpimg_width();
  inline void set_has_helpimg_height();
  inline void clear_has_helpimg_height();
  inline void set_has_weixin_width();
  inline void clear_has_weixin_width();
  inline void set_has_weixin_height();
  inline void clear_has_weixin_height();

  ::std::string* helpimg_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 helpimg_width_;
  ::std::string* weixin_;
  ::google::protobuf::int32 helpimg_height_;
  ::google::protobuf::int32 weixin_width_;
  ::google::protobuf::int32 weixin_height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_remote_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_remote_2eproto();
  #endif
  friend void protobuf_AssignDesc_remote_2eproto();
  friend void protobuf_ShutdownFile_remote_2eproto();

  void InitAsDefaultInstance();
  static Remote* default_instance_;
};
// ===================================================================


// ===================================================================

// Remote

// optional int32 code = 1;
inline bool Remote::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Remote::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Remote::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Remote::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Remote::code() const {
  return code_;
}
inline void Remote::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional string helpimg = 2;
inline bool Remote::has_helpimg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Remote::set_has_helpimg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Remote::clear_has_helpimg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Remote::clear_helpimg() {
  if (helpimg_ != &::google::protobuf::internal::kEmptyString) {
    helpimg_->clear();
  }
  clear_has_helpimg();
}
inline const ::std::string& Remote::helpimg() const {
  return *helpimg_;
}
inline void Remote::set_helpimg(const ::std::string& value) {
  set_has_helpimg();
  if (helpimg_ == &::google::protobuf::internal::kEmptyString) {
    helpimg_ = new ::std::string;
  }
  helpimg_->assign(value);
}
inline void Remote::set_helpimg(const char* value) {
  set_has_helpimg();
  if (helpimg_ == &::google::protobuf::internal::kEmptyString) {
    helpimg_ = new ::std::string;
  }
  helpimg_->assign(value);
}
inline void Remote::set_helpimg(const char* value, size_t size) {
  set_has_helpimg();
  if (helpimg_ == &::google::protobuf::internal::kEmptyString) {
    helpimg_ = new ::std::string;
  }
  helpimg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Remote::mutable_helpimg() {
  set_has_helpimg();
  if (helpimg_ == &::google::protobuf::internal::kEmptyString) {
    helpimg_ = new ::std::string;
  }
  return helpimg_;
}
inline ::std::string* Remote::release_helpimg() {
  clear_has_helpimg();
  if (helpimg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = helpimg_;
    helpimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Remote::set_allocated_helpimg(::std::string* helpimg) {
  if (helpimg_ != &::google::protobuf::internal::kEmptyString) {
    delete helpimg_;
  }
  if (helpimg) {
    set_has_helpimg();
    helpimg_ = helpimg;
  } else {
    clear_has_helpimg();
    helpimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string weixin = 3;
inline bool Remote::has_weixin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Remote::set_has_weixin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Remote::clear_has_weixin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Remote::clear_weixin() {
  if (weixin_ != &::google::protobuf::internal::kEmptyString) {
    weixin_->clear();
  }
  clear_has_weixin();
}
inline const ::std::string& Remote::weixin() const {
  return *weixin_;
}
inline void Remote::set_weixin(const ::std::string& value) {
  set_has_weixin();
  if (weixin_ == &::google::protobuf::internal::kEmptyString) {
    weixin_ = new ::std::string;
  }
  weixin_->assign(value);
}
inline void Remote::set_weixin(const char* value) {
  set_has_weixin();
  if (weixin_ == &::google::protobuf::internal::kEmptyString) {
    weixin_ = new ::std::string;
  }
  weixin_->assign(value);
}
inline void Remote::set_weixin(const char* value, size_t size) {
  set_has_weixin();
  if (weixin_ == &::google::protobuf::internal::kEmptyString) {
    weixin_ = new ::std::string;
  }
  weixin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Remote::mutable_weixin() {
  set_has_weixin();
  if (weixin_ == &::google::protobuf::internal::kEmptyString) {
    weixin_ = new ::std::string;
  }
  return weixin_;
}
inline ::std::string* Remote::release_weixin() {
  clear_has_weixin();
  if (weixin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weixin_;
    weixin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Remote::set_allocated_weixin(::std::string* weixin) {
  if (weixin_ != &::google::protobuf::internal::kEmptyString) {
    delete weixin_;
  }
  if (weixin) {
    set_has_weixin();
    weixin_ = weixin;
  } else {
    clear_has_weixin();
    weixin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 helpimg_width = 4;
inline bool Remote::has_helpimg_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Remote::set_has_helpimg_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Remote::clear_has_helpimg_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Remote::clear_helpimg_width() {
  helpimg_width_ = 0;
  clear_has_helpimg_width();
}
inline ::google::protobuf::int32 Remote::helpimg_width() const {
  return helpimg_width_;
}
inline void Remote::set_helpimg_width(::google::protobuf::int32 value) {
  set_has_helpimg_width();
  helpimg_width_ = value;
}

// optional int32 helpimg_height = 5;
inline bool Remote::has_helpimg_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Remote::set_has_helpimg_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Remote::clear_has_helpimg_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Remote::clear_helpimg_height() {
  helpimg_height_ = 0;
  clear_has_helpimg_height();
}
inline ::google::protobuf::int32 Remote::helpimg_height() const {
  return helpimg_height_;
}
inline void Remote::set_helpimg_height(::google::protobuf::int32 value) {
  set_has_helpimg_height();
  helpimg_height_ = value;
}

// optional int32 weixin_width = 6;
inline bool Remote::has_weixin_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Remote::set_has_weixin_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Remote::clear_has_weixin_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Remote::clear_weixin_width() {
  weixin_width_ = 0;
  clear_has_weixin_width();
}
inline ::google::protobuf::int32 Remote::weixin_width() const {
  return weixin_width_;
}
inline void Remote::set_weixin_width(::google::protobuf::int32 value) {
  set_has_weixin_width();
  weixin_width_ = value;
}

// optional int32 weixin_height = 7;
inline bool Remote::has_weixin_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Remote::set_has_weixin_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Remote::clear_has_weixin_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Remote::clear_weixin_height() {
  weixin_height_ = 0;
  clear_has_weixin_height();
}
inline ::google::protobuf::int32 Remote::weixin_height() const {
  return weixin_height_;
}
inline void Remote::set_weixin_height(::google::protobuf::int32 value) {
  set_has_weixin_height();
  weixin_height_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_remote_2eproto__INCLUDED
