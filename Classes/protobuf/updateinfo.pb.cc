// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: updateinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "updateinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

void protobuf_ShutdownFile_updateinfo_2eproto() {
  delete UpdateInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_updateinfo_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_updateinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cloudbox::protobuf::protobuf_AddDesc_common_2eproto();
  UpdateInfo::default_instance_ = new UpdateInfo();
  UpdateInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_updateinfo_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_updateinfo_2eproto_once_);
void protobuf_AddDesc_updateinfo_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_updateinfo_2eproto_once_,
                 &protobuf_AddDesc_updateinfo_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_updateinfo_2eproto {
  StaticDescriptorInitializer_updateinfo_2eproto() {
    protobuf_AddDesc_updateinfo_2eproto();
  }
} static_descriptor_initializer_updateinfo_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int UpdateInfo::kCodeFieldNumber;
const int UpdateInfo::kVersionFieldNumber;
const int UpdateInfo::kUrlFieldNumber;
const int UpdateInfo::kMd5FieldNumber;
const int UpdateInfo::kMessagesFieldNumber;
#endif  // !_MSC_VER

UpdateInfo::UpdateInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpdateInfo::InitAsDefaultInstance() {
}

UpdateInfo::UpdateInfo(const UpdateInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateInfo::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  version_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateInfo::~UpdateInfo() {
  SharedDtor();
}

void UpdateInfo::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateInfo& UpdateInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_updateinfo_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_updateinfo_2eproto();
#endif
  return *default_instance_;
}

UpdateInfo* UpdateInfo::default_instance_ = NULL;

UpdateInfo* UpdateInfo::New() const {
  return new UpdateInfo;
}

void UpdateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    version_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::kEmptyString) {
        md5_->clear();
      }
    }
  }
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpdateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_version;
        break;
      }

      // optional float version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_md5;
        break;
      }

      // optional string md5 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_messages;
        break;
      }

      // repeated .cloudbox.protobuf.LineInfo messages = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_messages;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional float version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->version(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional string md5 = 4;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->md5(), output);
  }

  // repeated .cloudbox.protobuf.LineInfo messages = 5;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->messages(i), output);
  }

}

int UpdateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional float version = 2;
    if (has_version()) {
      total_size += 1 + 4;
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string md5 = 4;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

  }
  // repeated .cloudbox.protobuf.LineInfo messages = 5;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateInfo*>(&from));
}

void UpdateInfo::MergeFrom(const UpdateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
  }
}

void UpdateInfo::CopyFrom(const UpdateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateInfo::IsInitialized() const {

  return true;
}

void UpdateInfo::Swap(UpdateInfo* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(version_, other->version_);
    std::swap(url_, other->url_);
    std::swap(md5_, other->md5_);
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateInfo::GetTypeName() const {
  return "cloudbox.protobuf.UpdateInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)
