// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playinfo_response.proto

#ifndef PROTOBUF_playinfo_5fresponse_2eproto__INCLUDED
#define PROTOBUF_playinfo_5fresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_playinfo_5fresponse_2eproto();
void protobuf_AssignDesc_playinfo_5fresponse_2eproto();
void protobuf_ShutdownFile_playinfo_5fresponse_2eproto();

class EpisodeInfo;
class PlayInfo;

// ===================================================================

class EpisodeInfo : public ::google::protobuf::MessageLite {
 public:
  EpisodeInfo();
  virtual ~EpisodeInfo();

  EpisodeInfo(const EpisodeInfo& from);

  inline EpisodeInfo& operator=(const EpisodeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const EpisodeInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EpisodeInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EpisodeInfo* other);

  // implements Message ----------------------------------------------

  EpisodeInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EpisodeInfo& from);
  void MergeFrom(const EpisodeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 episode = 1;
  inline bool has_episode() const;
  inline void clear_episode();
  static const int kEpisodeFieldNumber = 1;
  inline ::google::protobuf::int32 episode() const;
  inline void set_episode(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .cloudbox.protobuf.PlaySiteInfo sites = 3;
  inline int sites_size() const;
  inline void clear_sites();
  static const int kSitesFieldNumber = 3;
  inline const ::cloudbox::protobuf::PlaySiteInfo& sites(int index) const;
  inline ::cloudbox::protobuf::PlaySiteInfo* mutable_sites(int index);
  inline ::cloudbox::protobuf::PlaySiteInfo* add_sites();
  inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::PlaySiteInfo >&
      sites() const;
  inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::PlaySiteInfo >*
      mutable_sites();

  // optional string stage = 4;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 4;
  inline const ::std::string& stage() const;
  inline void set_stage(const ::std::string& value);
  inline void set_stage(const char* value);
  inline void set_stage(const char* value, size_t size);
  inline ::std::string* mutable_stage();
  inline ::std::string* release_stage();
  inline void set_allocated_stage(::std::string* stage);

  // @@protoc_insertion_point(class_scope:cloudbox.protobuf.EpisodeInfo)
 private:
  inline void set_has_episode();
  inline void clear_has_episode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_stage();
  inline void clear_has_stage();

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::PlaySiteInfo > sites_;
  ::std::string* stage_;
  ::google::protobuf::int32 episode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_playinfo_5fresponse_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_playinfo_5fresponse_2eproto();
  #endif
  friend void protobuf_AssignDesc_playinfo_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_playinfo_5fresponse_2eproto();

  void InitAsDefaultInstance();
  static EpisodeInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlayInfo : public ::google::protobuf::MessageLite {
 public:
  PlayInfo();
  virtual ~PlayInfo();

  PlayInfo(const PlayInfo& from);

  inline PlayInfo& operator=(const PlayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const PlayInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const PlayInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(PlayInfo* other);

  // implements Message ----------------------------------------------

  PlayInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const PlayInfo& from);
  void MergeFrom(const PlayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cloudbox.protobuf.ImageInfo img = 1;
  inline bool has_img() const;
  inline void clear_img();
  static const int kImgFieldNumber = 1;
  inline const ::cloudbox::protobuf::ImageInfo& img() const;
  inline ::cloudbox::protobuf::ImageInfo* mutable_img();
  inline ::cloudbox::protobuf::ImageInfo* release_img();
  inline void set_allocated_img(::cloudbox::protobuf::ImageInfo* img);

  // optional int32 total = 2;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 2;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // repeated .cloudbox.protobuf.EpisodeInfo result = 3;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline const ::cloudbox::protobuf::EpisodeInfo& result(int index) const;
  inline ::cloudbox::protobuf::EpisodeInfo* mutable_result(int index);
  inline ::cloudbox::protobuf::EpisodeInfo* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::EpisodeInfo >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::EpisodeInfo >*
      mutable_result();

  // optional int64 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::int64 size() const;
  inline void set_size(::google::protobuf::int64 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:cloudbox.protobuf.PlayInfo)
 private:
  inline void set_has_img();
  inline void clear_has_img();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_name();
  inline void clear_has_name();

  ::cloudbox::protobuf::ImageInfo* img_;
  ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::EpisodeInfo > result_;
  ::google::protobuf::int64 size_;
  ::std::string* name_;
  ::google::protobuf::int32 total_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_playinfo_5fresponse_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_playinfo_5fresponse_2eproto();
  #endif
  friend void protobuf_AssignDesc_playinfo_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_playinfo_5fresponse_2eproto();

  void InitAsDefaultInstance();
  static PlayInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// EpisodeInfo

// optional int32 episode = 1;
inline bool EpisodeInfo::has_episode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EpisodeInfo::set_has_episode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EpisodeInfo::clear_has_episode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EpisodeInfo::clear_episode() {
  episode_ = 0;
  clear_has_episode();
}
inline ::google::protobuf::int32 EpisodeInfo::episode() const {
  return episode_;
}
inline void EpisodeInfo::set_episode(::google::protobuf::int32 value) {
  set_has_episode();
  episode_ = value;
}

// optional string name = 2;
inline bool EpisodeInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EpisodeInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EpisodeInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EpisodeInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EpisodeInfo::name() const {
  return *name_;
}
inline void EpisodeInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EpisodeInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EpisodeInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EpisodeInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* EpisodeInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EpisodeInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .cloudbox.protobuf.PlaySiteInfo sites = 3;
inline int EpisodeInfo::sites_size() const {
  return sites_.size();
}
inline void EpisodeInfo::clear_sites() {
  sites_.Clear();
}
inline const ::cloudbox::protobuf::PlaySiteInfo& EpisodeInfo::sites(int index) const {
  return sites_.Get(index);
}
inline ::cloudbox::protobuf::PlaySiteInfo* EpisodeInfo::mutable_sites(int index) {
  return sites_.Mutable(index);
}
inline ::cloudbox::protobuf::PlaySiteInfo* EpisodeInfo::add_sites() {
  return sites_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::PlaySiteInfo >&
EpisodeInfo::sites() const {
  return sites_;
}
inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::PlaySiteInfo >*
EpisodeInfo::mutable_sites() {
  return &sites_;
}

// optional string stage = 4;
inline bool EpisodeInfo::has_stage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EpisodeInfo::set_has_stage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EpisodeInfo::clear_has_stage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EpisodeInfo::clear_stage() {
  if (stage_ != &::google::protobuf::internal::kEmptyString) {
    stage_->clear();
  }
  clear_has_stage();
}
inline const ::std::string& EpisodeInfo::stage() const {
  return *stage_;
}
inline void EpisodeInfo::set_stage(const ::std::string& value) {
  set_has_stage();
  if (stage_ == &::google::protobuf::internal::kEmptyString) {
    stage_ = new ::std::string;
  }
  stage_->assign(value);
}
inline void EpisodeInfo::set_stage(const char* value) {
  set_has_stage();
  if (stage_ == &::google::protobuf::internal::kEmptyString) {
    stage_ = new ::std::string;
  }
  stage_->assign(value);
}
inline void EpisodeInfo::set_stage(const char* value, size_t size) {
  set_has_stage();
  if (stage_ == &::google::protobuf::internal::kEmptyString) {
    stage_ = new ::std::string;
  }
  stage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EpisodeInfo::mutable_stage() {
  set_has_stage();
  if (stage_ == &::google::protobuf::internal::kEmptyString) {
    stage_ = new ::std::string;
  }
  return stage_;
}
inline ::std::string* EpisodeInfo::release_stage() {
  clear_has_stage();
  if (stage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stage_;
    stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EpisodeInfo::set_allocated_stage(::std::string* stage) {
  if (stage_ != &::google::protobuf::internal::kEmptyString) {
    delete stage_;
  }
  if (stage) {
    set_has_stage();
    stage_ = stage;
  } else {
    clear_has_stage();
    stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PlayInfo

// optional .cloudbox.protobuf.ImageInfo img = 1;
inline bool PlayInfo::has_img() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayInfo::set_has_img() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayInfo::clear_has_img() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayInfo::clear_img() {
  if (img_ != NULL) img_->::cloudbox::protobuf::ImageInfo::Clear();
  clear_has_img();
}
inline const ::cloudbox::protobuf::ImageInfo& PlayInfo::img() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return img_ != NULL ? *img_ : *default_instance().img_;
#else
  return img_ != NULL ? *img_ : *default_instance_->img_;
#endif
}
inline ::cloudbox::protobuf::ImageInfo* PlayInfo::mutable_img() {
  set_has_img();
  if (img_ == NULL) img_ = new ::cloudbox::protobuf::ImageInfo;
  return img_;
}
inline ::cloudbox::protobuf::ImageInfo* PlayInfo::release_img() {
  clear_has_img();
  ::cloudbox::protobuf::ImageInfo* temp = img_;
  img_ = NULL;
  return temp;
}
inline void PlayInfo::set_allocated_img(::cloudbox::protobuf::ImageInfo* img) {
  delete img_;
  img_ = img;
  if (img) {
    set_has_img();
  } else {
    clear_has_img();
  }
}

// optional int32 total = 2;
inline bool PlayInfo::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayInfo::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayInfo::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayInfo::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 PlayInfo::total() const {
  return total_;
}
inline void PlayInfo::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// repeated .cloudbox.protobuf.EpisodeInfo result = 3;
inline int PlayInfo::result_size() const {
  return result_.size();
}
inline void PlayInfo::clear_result() {
  result_.Clear();
}
inline const ::cloudbox::protobuf::EpisodeInfo& PlayInfo::result(int index) const {
  return result_.Get(index);
}
inline ::cloudbox::protobuf::EpisodeInfo* PlayInfo::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::cloudbox::protobuf::EpisodeInfo* PlayInfo::add_result() {
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::EpisodeInfo >&
PlayInfo::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::EpisodeInfo >*
PlayInfo::mutable_result() {
  return &result_;
}

// optional int64 size = 4;
inline bool PlayInfo::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayInfo::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayInfo::clear_size() {
  size_ = GOOGLE_LONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::int64 PlayInfo::size() const {
  return size_;
}
inline void PlayInfo::set_size(::google::protobuf::int64 value) {
  set_has_size();
  size_ = value;
}

// optional string name = 5;
inline bool PlayInfo::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayInfo::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayInfo::name() const {
  return *name_;
}
inline void PlayInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_playinfo_5fresponse_2eproto__INCLUDED
