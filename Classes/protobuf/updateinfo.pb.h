// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: updateinfo.proto

#ifndef PROTOBUF_updateinfo_2eproto__INCLUDED
#define PROTOBUF_updateinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_updateinfo_2eproto();
void protobuf_AssignDesc_updateinfo_2eproto();
void protobuf_ShutdownFile_updateinfo_2eproto();

class UpdateInfo;

// ===================================================================

class UpdateInfo : public ::google::protobuf::MessageLite {
 public:
  UpdateInfo();
  virtual ~UpdateInfo();

  UpdateInfo(const UpdateInfo& from);

  inline UpdateInfo& operator=(const UpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const UpdateInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const UpdateInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(UpdateInfo* other);

  // implements Message ----------------------------------------------

  UpdateInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const UpdateInfo& from);
  void MergeFrom(const UpdateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional float version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline float version() const;
  inline void set_version(float value);

  // optional string url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string md5 = 4;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 4;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // repeated .cloudbox.protobuf.LineInfo messages = 5;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 5;
  inline const ::cloudbox::protobuf::LineInfo& messages(int index) const;
  inline ::cloudbox::protobuf::LineInfo* mutable_messages(int index);
  inline ::cloudbox::protobuf::LineInfo* add_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::LineInfo >&
      messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::LineInfo >*
      mutable_messages();

  // @@protoc_insertion_point(class_scope:cloudbox.protobuf.UpdateInfo)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_md5();
  inline void clear_has_md5();

  ::google::protobuf::int32 code_;
  float version_;
  ::std::string* url_;
  ::std::string* md5_;
  ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::LineInfo > messages_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_updateinfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_updateinfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_updateinfo_2eproto();
  friend void protobuf_ShutdownFile_updateinfo_2eproto();

  void InitAsDefaultInstance();
  static UpdateInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// UpdateInfo

// optional int32 code = 1;
inline bool UpdateInfo::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateInfo::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateInfo::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 UpdateInfo::code() const {
  return code_;
}
inline void UpdateInfo::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional float version = 2;
inline bool UpdateInfo::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateInfo::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateInfo::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline float UpdateInfo::version() const {
  return version_;
}
inline void UpdateInfo::set_version(float value) {
  set_has_version();
  version_ = value;
}

// optional string url = 3;
inline bool UpdateInfo::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateInfo::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateInfo::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateInfo::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& UpdateInfo::url() const {
  return *url_;
}
inline void UpdateInfo::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void UpdateInfo::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void UpdateInfo::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateInfo::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* UpdateInfo::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateInfo::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string md5 = 4;
inline bool UpdateInfo::has_md5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateInfo::set_has_md5() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateInfo::clear_has_md5() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateInfo::clear_md5() {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& UpdateInfo::md5() const {
  return *md5_;
}
inline void UpdateInfo::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void UpdateInfo::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
}
inline void UpdateInfo::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UpdateInfo::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    md5_ = new ::std::string;
  }
  return md5_;
}
inline ::std::string* UpdateInfo::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UpdateInfo::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::kEmptyString) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .cloudbox.protobuf.LineInfo messages = 5;
inline int UpdateInfo::messages_size() const {
  return messages_.size();
}
inline void UpdateInfo::clear_messages() {
  messages_.Clear();
}
inline const ::cloudbox::protobuf::LineInfo& UpdateInfo::messages(int index) const {
  return messages_.Get(index);
}
inline ::cloudbox::protobuf::LineInfo* UpdateInfo::mutable_messages(int index) {
  return messages_.Mutable(index);
}
inline ::cloudbox::protobuf::LineInfo* UpdateInfo::add_messages() {
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::LineInfo >&
UpdateInfo::messages() const {
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::LineInfo >*
UpdateInfo::mutable_messages() {
  return &messages_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_updateinfo_2eproto__INCLUDED
