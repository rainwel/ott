// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: homepageinfo_response.proto

#ifndef PROTOBUF_homepageinfo_5fresponse_2eproto__INCLUDED
#define PROTOBUF_homepageinfo_5fresponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_homepageinfo_5fresponse_2eproto();
void protobuf_AssignDesc_homepageinfo_5fresponse_2eproto();
void protobuf_ShutdownFile_homepageinfo_5fresponse_2eproto();

class RowInfo;
class SinglePageInfo;
class HomePageInfo;

enum RowInfo_Direction {
  RowInfo_Direction_VERTICAL = 0,
  RowInfo_Direction_HORIZONTAL = 1
};
bool RowInfo_Direction_IsValid(int value);
const RowInfo_Direction RowInfo_Direction_Direction_MIN = RowInfo_Direction_VERTICAL;
const RowInfo_Direction RowInfo_Direction_Direction_MAX = RowInfo_Direction_HORIZONTAL;
const int RowInfo_Direction_Direction_ARRAYSIZE = RowInfo_Direction_Direction_MAX + 1;

// ===================================================================

class RowInfo : public ::google::protobuf::MessageLite {
 public:
  RowInfo();
  virtual ~RowInfo();

  RowInfo(const RowInfo& from);

  inline RowInfo& operator=(const RowInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const RowInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RowInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RowInfo* other);

  // implements Message ----------------------------------------------

  RowInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RowInfo& from);
  void MergeFrom(const RowInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef RowInfo_Direction Direction;
  static const Direction VERTICAL = RowInfo_Direction_VERTICAL;
  static const Direction HORIZONTAL = RowInfo_Direction_HORIZONTAL;
  static inline bool Direction_IsValid(int value) {
    return RowInfo_Direction_IsValid(value);
  }
  static const Direction Direction_MIN =
    RowInfo_Direction_Direction_MIN;
  static const Direction Direction_MAX =
    RowInfo_Direction_Direction_MAX;
  static const int Direction_ARRAYSIZE =
    RowInfo_Direction_Direction_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional float offsetX = 2;
  inline bool has_offsetx() const;
  inline void clear_offsetx();
  static const int kOffsetXFieldNumber = 2;
  inline float offsetx() const;
  inline void set_offsetx(float value);

  // optional float offsetY = 3;
  inline bool has_offsety() const;
  inline void clear_offsety();
  static const int kOffsetYFieldNumber = 3;
  inline float offsety() const;
  inline void set_offsety(float value);

  // optional .cloudbox.protobuf.RowInfo.Direction direction = 4;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 4;
  inline ::cloudbox::protobuf::RowInfo_Direction direction() const;
  inline void set_direction(::cloudbox::protobuf::RowInfo_Direction value);

  // repeated .cloudbox.protobuf.BoxInfo boxes = 5;
  inline int boxes_size() const;
  inline void clear_boxes();
  static const int kBoxesFieldNumber = 5;
  inline const ::cloudbox::protobuf::BoxInfo& boxes(int index) const;
  inline ::cloudbox::protobuf::BoxInfo* mutable_boxes(int index);
  inline ::cloudbox::protobuf::BoxInfo* add_boxes();
  inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::BoxInfo >&
      boxes() const;
  inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::BoxInfo >*
      mutable_boxes();

  // optional float width = 6;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 6;
  inline float width() const;
  inline void set_width(float value);

  // optional float height = 7;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 7;
  inline float height() const;
  inline void set_height(float value);

  // @@protoc_insertion_point(class_scope:cloudbox.protobuf.RowInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_offsetx();
  inline void clear_has_offsetx();
  inline void set_has_offsety();
  inline void clear_has_offsety();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::std::string* id_;
  float offsetx_;
  float offsety_;
  ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::BoxInfo > boxes_;
  int direction_;
  float width_;
  float height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_homepageinfo_5fresponse_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_homepageinfo_5fresponse_2eproto();
  #endif
  friend void protobuf_AssignDesc_homepageinfo_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_homepageinfo_5fresponse_2eproto();

  void InitAsDefaultInstance();
  static RowInfo* default_instance_;
};
// -------------------------------------------------------------------

class SinglePageInfo : public ::google::protobuf::MessageLite {
 public:
  SinglePageInfo();
  virtual ~SinglePageInfo();

  SinglePageInfo(const SinglePageInfo& from);

  inline SinglePageInfo& operator=(const SinglePageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const SinglePageInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SinglePageInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SinglePageInfo* other);

  // implements Message ----------------------------------------------

  SinglePageInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SinglePageInfo& from);
  void MergeFrom(const SinglePageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // repeated .cloudbox.protobuf.RowInfo rows = 3;
  inline int rows_size() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 3;
  inline const ::cloudbox::protobuf::RowInfo& rows(int index) const;
  inline ::cloudbox::protobuf::RowInfo* mutable_rows(int index);
  inline ::cloudbox::protobuf::RowInfo* add_rows();
  inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::RowInfo >&
      rows() const;
  inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::RowInfo >*
      mutable_rows();

  // @@protoc_insertion_point(class_scope:cloudbox.protobuf.SinglePageInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();

  ::std::string* id_;
  ::std::string* title_;
  ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::RowInfo > rows_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_homepageinfo_5fresponse_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_homepageinfo_5fresponse_2eproto();
  #endif
  friend void protobuf_AssignDesc_homepageinfo_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_homepageinfo_5fresponse_2eproto();

  void InitAsDefaultInstance();
  static SinglePageInfo* default_instance_;
};
// -------------------------------------------------------------------

class HomePageInfo : public ::google::protobuf::MessageLite {
 public:
  HomePageInfo();
  virtual ~HomePageInfo();

  HomePageInfo(const HomePageInfo& from);

  inline HomePageInfo& operator=(const HomePageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const HomePageInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const HomePageInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(HomePageInfo* other);

  // implements Message ----------------------------------------------

  HomePageInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const HomePageInfo& from);
  void MergeFrom(const HomePageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional int32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional int32 total = 3;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 3;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // repeated .cloudbox.protobuf.SinglePageInfo result = 4;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline const ::cloudbox::protobuf::SinglePageInfo& result(int index) const;
  inline ::cloudbox::protobuf::SinglePageInfo* mutable_result(int index);
  inline ::cloudbox::protobuf::SinglePageInfo* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::SinglePageInfo >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::SinglePageInfo >*
      mutable_result();

  // optional int32 hasMenu = 5;
  inline bool has_hasmenu() const;
  inline void clear_hasmenu();
  static const int kHasMenuFieldNumber = 5;
  inline ::google::protobuf::int32 hasmenu() const;
  inline void set_hasmenu(::google::protobuf::int32 value);

  // optional string title = 6;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 6;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional int32 defaultPage = 7;
  inline bool has_defaultpage() const;
  inline void clear_defaultpage();
  static const int kDefaultPageFieldNumber = 7;
  inline ::google::protobuf::int32 defaultpage() const;
  inline void set_defaultpage(::google::protobuf::int32 value);

  // optional .cloudbox.protobuf.ImageInfo background = 8;
  inline bool has_background() const;
  inline void clear_background();
  static const int kBackgroundFieldNumber = 8;
  inline const ::cloudbox::protobuf::ImageInfo& background() const;
  inline ::cloudbox::protobuf::ImageInfo* mutable_background();
  inline ::cloudbox::protobuf::ImageInfo* release_background();
  inline void set_allocated_background(::cloudbox::protobuf::ImageInfo* background);

  // optional string id = 9;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 9;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional float offsetX = 10;
  inline bool has_offsetx() const;
  inline void clear_offsetx();
  static const int kOffsetXFieldNumber = 10;
  inline float offsetx() const;
  inline void set_offsetx(float value);

  // optional float offsetY = 11;
  inline bool has_offsety() const;
  inline void clear_offsety();
  static const int kOffsetYFieldNumber = 11;
  inline float offsety() const;
  inline void set_offsety(float value);

  // optional int32 orderdesc = 12;
  inline bool has_orderdesc() const;
  inline void clear_orderdesc();
  static const int kOrderdescFieldNumber = 12;
  inline ::google::protobuf::int32 orderdesc() const;
  inline void set_orderdesc(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cloudbox.protobuf.HomePageInfo)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_hasmenu();
  inline void clear_has_hasmenu();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_defaultpage();
  inline void clear_has_defaultpage();
  inline void set_has_background();
  inline void clear_has_background();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_offsetx();
  inline void clear_has_offsetx();
  inline void set_has_offsety();
  inline void clear_has_offsety();
  inline void set_has_orderdesc();
  inline void clear_has_orderdesc();

  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::SinglePageInfo > result_;
  ::google::protobuf::int32 total_;
  ::google::protobuf::int32 hasmenu_;
  ::std::string* title_;
  ::cloudbox::protobuf::ImageInfo* background_;
  ::google::protobuf::int32 defaultpage_;
  float offsetx_;
  ::std::string* id_;
  float offsety_;
  ::google::protobuf::int32 orderdesc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_homepageinfo_5fresponse_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_homepageinfo_5fresponse_2eproto();
  #endif
  friend void protobuf_AssignDesc_homepageinfo_5fresponse_2eproto();
  friend void protobuf_ShutdownFile_homepageinfo_5fresponse_2eproto();

  void InitAsDefaultInstance();
  static HomePageInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// RowInfo

// optional string id = 1;
inline bool RowInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RowInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RowInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RowInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RowInfo::id() const {
  return *id_;
}
inline void RowInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RowInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RowInfo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RowInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* RowInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RowInfo::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float offsetX = 2;
inline bool RowInfo::has_offsetx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RowInfo::set_has_offsetx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RowInfo::clear_has_offsetx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RowInfo::clear_offsetx() {
  offsetx_ = 0;
  clear_has_offsetx();
}
inline float RowInfo::offsetx() const {
  return offsetx_;
}
inline void RowInfo::set_offsetx(float value) {
  set_has_offsetx();
  offsetx_ = value;
}

// optional float offsetY = 3;
inline bool RowInfo::has_offsety() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RowInfo::set_has_offsety() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RowInfo::clear_has_offsety() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RowInfo::clear_offsety() {
  offsety_ = 0;
  clear_has_offsety();
}
inline float RowInfo::offsety() const {
  return offsety_;
}
inline void RowInfo::set_offsety(float value) {
  set_has_offsety();
  offsety_ = value;
}

// optional .cloudbox.protobuf.RowInfo.Direction direction = 4;
inline bool RowInfo::has_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RowInfo::set_has_direction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RowInfo::clear_has_direction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RowInfo::clear_direction() {
  direction_ = 0;
  clear_has_direction();
}
inline ::cloudbox::protobuf::RowInfo_Direction RowInfo::direction() const {
  return static_cast< ::cloudbox::protobuf::RowInfo_Direction >(direction_);
}
inline void RowInfo::set_direction(::cloudbox::protobuf::RowInfo_Direction value) {
  assert(::cloudbox::protobuf::RowInfo_Direction_IsValid(value));
  set_has_direction();
  direction_ = value;
}

// repeated .cloudbox.protobuf.BoxInfo boxes = 5;
inline int RowInfo::boxes_size() const {
  return boxes_.size();
}
inline void RowInfo::clear_boxes() {
  boxes_.Clear();
}
inline const ::cloudbox::protobuf::BoxInfo& RowInfo::boxes(int index) const {
  return boxes_.Get(index);
}
inline ::cloudbox::protobuf::BoxInfo* RowInfo::mutable_boxes(int index) {
  return boxes_.Mutable(index);
}
inline ::cloudbox::protobuf::BoxInfo* RowInfo::add_boxes() {
  return boxes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::BoxInfo >&
RowInfo::boxes() const {
  return boxes_;
}
inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::BoxInfo >*
RowInfo::mutable_boxes() {
  return &boxes_;
}

// optional float width = 6;
inline bool RowInfo::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RowInfo::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RowInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RowInfo::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float RowInfo::width() const {
  return width_;
}
inline void RowInfo::set_width(float value) {
  set_has_width();
  width_ = value;
}

// optional float height = 7;
inline bool RowInfo::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RowInfo::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RowInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RowInfo::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float RowInfo::height() const {
  return height_;
}
inline void RowInfo::set_height(float value) {
  set_has_height();
  height_ = value;
}

// -------------------------------------------------------------------

// SinglePageInfo

// optional string id = 1;
inline bool SinglePageInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SinglePageInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SinglePageInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SinglePageInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& SinglePageInfo::id() const {
  return *id_;
}
inline void SinglePageInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SinglePageInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void SinglePageInfo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SinglePageInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* SinglePageInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SinglePageInfo::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 2;
inline bool SinglePageInfo::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SinglePageInfo::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SinglePageInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SinglePageInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& SinglePageInfo::title() const {
  return *title_;
}
inline void SinglePageInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SinglePageInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SinglePageInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SinglePageInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* SinglePageInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SinglePageInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .cloudbox.protobuf.RowInfo rows = 3;
inline int SinglePageInfo::rows_size() const {
  return rows_.size();
}
inline void SinglePageInfo::clear_rows() {
  rows_.Clear();
}
inline const ::cloudbox::protobuf::RowInfo& SinglePageInfo::rows(int index) const {
  return rows_.Get(index);
}
inline ::cloudbox::protobuf::RowInfo* SinglePageInfo::mutable_rows(int index) {
  return rows_.Mutable(index);
}
inline ::cloudbox::protobuf::RowInfo* SinglePageInfo::add_rows() {
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::RowInfo >&
SinglePageInfo::rows() const {
  return rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::RowInfo >*
SinglePageInfo::mutable_rows() {
  return &rows_;
}

// -------------------------------------------------------------------

// HomePageInfo

// optional int32 code = 1;
inline bool HomePageInfo::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HomePageInfo::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HomePageInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HomePageInfo::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 HomePageInfo::code() const {
  return code_;
}
inline void HomePageInfo::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional int32 version = 2;
inline bool HomePageInfo::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HomePageInfo::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HomePageInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HomePageInfo::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 HomePageInfo::version() const {
  return version_;
}
inline void HomePageInfo::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional int32 total = 3;
inline bool HomePageInfo::has_total() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HomePageInfo::set_has_total() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HomePageInfo::clear_has_total() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HomePageInfo::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 HomePageInfo::total() const {
  return total_;
}
inline void HomePageInfo::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// repeated .cloudbox.protobuf.SinglePageInfo result = 4;
inline int HomePageInfo::result_size() const {
  return result_.size();
}
inline void HomePageInfo::clear_result() {
  result_.Clear();
}
inline const ::cloudbox::protobuf::SinglePageInfo& HomePageInfo::result(int index) const {
  return result_.Get(index);
}
inline ::cloudbox::protobuf::SinglePageInfo* HomePageInfo::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::cloudbox::protobuf::SinglePageInfo* HomePageInfo::add_result() {
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::SinglePageInfo >&
HomePageInfo::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::cloudbox::protobuf::SinglePageInfo >*
HomePageInfo::mutable_result() {
  return &result_;
}

// optional int32 hasMenu = 5;
inline bool HomePageInfo::has_hasmenu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HomePageInfo::set_has_hasmenu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HomePageInfo::clear_has_hasmenu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HomePageInfo::clear_hasmenu() {
  hasmenu_ = 0;
  clear_has_hasmenu();
}
inline ::google::protobuf::int32 HomePageInfo::hasmenu() const {
  return hasmenu_;
}
inline void HomePageInfo::set_hasmenu(::google::protobuf::int32 value) {
  set_has_hasmenu();
  hasmenu_ = value;
}

// optional string title = 6;
inline bool HomePageInfo::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HomePageInfo::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HomePageInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HomePageInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& HomePageInfo::title() const {
  return *title_;
}
inline void HomePageInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void HomePageInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void HomePageInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HomePageInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* HomePageInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HomePageInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 defaultPage = 7;
inline bool HomePageInfo::has_defaultpage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HomePageInfo::set_has_defaultpage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HomePageInfo::clear_has_defaultpage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HomePageInfo::clear_defaultpage() {
  defaultpage_ = 0;
  clear_has_defaultpage();
}
inline ::google::protobuf::int32 HomePageInfo::defaultpage() const {
  return defaultpage_;
}
inline void HomePageInfo::set_defaultpage(::google::protobuf::int32 value) {
  set_has_defaultpage();
  defaultpage_ = value;
}

// optional .cloudbox.protobuf.ImageInfo background = 8;
inline bool HomePageInfo::has_background() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HomePageInfo::set_has_background() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HomePageInfo::clear_has_background() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HomePageInfo::clear_background() {
  if (background_ != NULL) background_->::cloudbox::protobuf::ImageInfo::Clear();
  clear_has_background();
}
inline const ::cloudbox::protobuf::ImageInfo& HomePageInfo::background() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return background_ != NULL ? *background_ : *default_instance().background_;
#else
  return background_ != NULL ? *background_ : *default_instance_->background_;
#endif
}
inline ::cloudbox::protobuf::ImageInfo* HomePageInfo::mutable_background() {
  set_has_background();
  if (background_ == NULL) background_ = new ::cloudbox::protobuf::ImageInfo;
  return background_;
}
inline ::cloudbox::protobuf::ImageInfo* HomePageInfo::release_background() {
  clear_has_background();
  ::cloudbox::protobuf::ImageInfo* temp = background_;
  background_ = NULL;
  return temp;
}
inline void HomePageInfo::set_allocated_background(::cloudbox::protobuf::ImageInfo* background) {
  delete background_;
  background_ = background;
  if (background) {
    set_has_background();
  } else {
    clear_has_background();
  }
}

// optional string id = 9;
inline bool HomePageInfo::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HomePageInfo::set_has_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HomePageInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HomePageInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& HomePageInfo::id() const {
  return *id_;
}
inline void HomePageInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void HomePageInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void HomePageInfo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HomePageInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* HomePageInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HomePageInfo::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float offsetX = 10;
inline bool HomePageInfo::has_offsetx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HomePageInfo::set_has_offsetx() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HomePageInfo::clear_has_offsetx() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HomePageInfo::clear_offsetx() {
  offsetx_ = 0;
  clear_has_offsetx();
}
inline float HomePageInfo::offsetx() const {
  return offsetx_;
}
inline void HomePageInfo::set_offsetx(float value) {
  set_has_offsetx();
  offsetx_ = value;
}

// optional float offsetY = 11;
inline bool HomePageInfo::has_offsety() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HomePageInfo::set_has_offsety() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HomePageInfo::clear_has_offsety() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HomePageInfo::clear_offsety() {
  offsety_ = 0;
  clear_has_offsety();
}
inline float HomePageInfo::offsety() const {
  return offsety_;
}
inline void HomePageInfo::set_offsety(float value) {
  set_has_offsety();
  offsety_ = value;
}

// optional int32 orderdesc = 12;
inline bool HomePageInfo::has_orderdesc() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HomePageInfo::set_has_orderdesc() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HomePageInfo::clear_has_orderdesc() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HomePageInfo::clear_orderdesc() {
  orderdesc_ = 0;
  clear_has_orderdesc();
}
inline ::google::protobuf::int32 HomePageInfo::orderdesc() const {
  return orderdesc_;
}
inline void HomePageInfo::set_orderdesc(::google::protobuf::int32 value) {
  set_has_orderdesc();
  orderdesc_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_homepageinfo_5fresponse_2eproto__INCLUDED
