// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: homepageinfo_response.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "homepageinfo_response.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

void protobuf_ShutdownFile_homepageinfo_5fresponse_2eproto() {
  delete RowInfo::default_instance_;
  delete SinglePageInfo::default_instance_;
  delete HomePageInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_homepageinfo_5fresponse_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_homepageinfo_5fresponse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::cloudbox::protobuf::protobuf_AddDesc_common_2eproto();
  RowInfo::default_instance_ = new RowInfo();
  SinglePageInfo::default_instance_ = new SinglePageInfo();
  HomePageInfo::default_instance_ = new HomePageInfo();
  RowInfo::default_instance_->InitAsDefaultInstance();
  SinglePageInfo::default_instance_->InitAsDefaultInstance();
  HomePageInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_homepageinfo_5fresponse_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_homepageinfo_5fresponse_2eproto_once_);
void protobuf_AddDesc_homepageinfo_5fresponse_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_homepageinfo_5fresponse_2eproto_once_,
                 &protobuf_AddDesc_homepageinfo_5fresponse_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_homepageinfo_5fresponse_2eproto {
  StaticDescriptorInitializer_homepageinfo_5fresponse_2eproto() {
    protobuf_AddDesc_homepageinfo_5fresponse_2eproto();
  }
} static_descriptor_initializer_homepageinfo_5fresponse_2eproto_;
#endif

// ===================================================================

bool RowInfo_Direction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RowInfo_Direction RowInfo::VERTICAL;
const RowInfo_Direction RowInfo::HORIZONTAL;
const RowInfo_Direction RowInfo::Direction_MIN;
const RowInfo_Direction RowInfo::Direction_MAX;
const int RowInfo::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RowInfo::kIdFieldNumber;
const int RowInfo::kOffsetXFieldNumber;
const int RowInfo::kOffsetYFieldNumber;
const int RowInfo::kDirectionFieldNumber;
const int RowInfo::kBoxesFieldNumber;
const int RowInfo::kWidthFieldNumber;
const int RowInfo::kHeightFieldNumber;
#endif  // !_MSC_VER

RowInfo::RowInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RowInfo::InitAsDefaultInstance() {
}

RowInfo::RowInfo(const RowInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RowInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offsetx_ = 0;
  offsety_ = 0;
  direction_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RowInfo::~RowInfo() {
  SharedDtor();
}

void RowInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RowInfo& RowInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_homepageinfo_5fresponse_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_homepageinfo_5fresponse_2eproto();
#endif
  return *default_instance_;
}

RowInfo* RowInfo::default_instance_ = NULL;

RowInfo* RowInfo::New() const {
  return new RowInfo;
}

void RowInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    offsetx_ = 0;
    offsety_ = 0;
    direction_ = 0;
    width_ = 0;
    height_ = 0;
  }
  boxes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_offsetX;
        break;
      }

      // optional float offsetX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_offsetY;
        break;
      }

      // optional float offsetY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsety_)));
          set_has_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_direction;
        break;
      }

      // optional .cloudbox.protobuf.RowInfo.Direction direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloudbox::protobuf::RowInfo_Direction_IsValid(value)) {
            set_direction(static_cast< ::cloudbox::protobuf::RowInfo_Direction >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_boxes;
        break;
      }

      // repeated .cloudbox.protobuf.BoxInfo boxes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_boxes;
        if (input->ExpectTag(53)) goto parse_width;
        break;
      }

      // optional float width = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_height;
        break;
      }

      // optional float height = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional float offsetX = 2;
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->offsetx(), output);
  }

  // optional float offsetY = 3;
  if (has_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->offsety(), output);
  }

  // optional .cloudbox.protobuf.RowInfo.Direction direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }

  // repeated .cloudbox.protobuf.BoxInfo boxes = 5;
  for (int i = 0; i < this->boxes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->boxes(i), output);
  }

  // optional float width = 6;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->width(), output);
  }

  // optional float height = 7;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->height(), output);
  }

}

int RowInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional float offsetX = 2;
    if (has_offsetx()) {
      total_size += 1 + 4;
    }

    // optional float offsetY = 3;
    if (has_offsety()) {
      total_size += 1 + 4;
    }

    // optional .cloudbox.protobuf.RowInfo.Direction direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }

    // optional float width = 6;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 7;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  // repeated .cloudbox.protobuf.BoxInfo boxes = 5;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RowInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RowInfo*>(&from));
}

void RowInfo::MergeFrom(const RowInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxes_.MergeFrom(from.boxes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
    if (from.has_offsety()) {
      set_offsety(from.offsety());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
}

void RowInfo::CopyFrom(const RowInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowInfo::IsInitialized() const {

  return true;
}

void RowInfo::Swap(RowInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(offsety_, other->offsety_);
    std::swap(direction_, other->direction_);
    boxes_.Swap(&other->boxes_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RowInfo::GetTypeName() const {
  return "cloudbox.protobuf.RowInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SinglePageInfo::kIdFieldNumber;
const int SinglePageInfo::kTitleFieldNumber;
const int SinglePageInfo::kRowsFieldNumber;
#endif  // !_MSC_VER

SinglePageInfo::SinglePageInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SinglePageInfo::InitAsDefaultInstance() {
}

SinglePageInfo::SinglePageInfo(const SinglePageInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SinglePageInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SinglePageInfo::~SinglePageInfo() {
  SharedDtor();
}

void SinglePageInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SinglePageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SinglePageInfo& SinglePageInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_homepageinfo_5fresponse_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_homepageinfo_5fresponse_2eproto();
#endif
  return *default_instance_;
}

SinglePageInfo* SinglePageInfo::default_instance_ = NULL;

SinglePageInfo* SinglePageInfo::New() const {
  return new SinglePageInfo;
}

void SinglePageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
  }
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SinglePageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional string title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rows;
        break;
      }

      // repeated .cloudbox.protobuf.RowInfo rows = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rows;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SinglePageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // optional string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // repeated .cloudbox.protobuf.RowInfo rows = 3;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->rows(i), output);
  }

}

int SinglePageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  // repeated .cloudbox.protobuf.RowInfo rows = 3;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SinglePageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SinglePageInfo*>(&from));
}

void SinglePageInfo::MergeFrom(const SinglePageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rows_.MergeFrom(from.rows_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
}

void SinglePageInfo::CopyFrom(const SinglePageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePageInfo::IsInitialized() const {

  return true;
}

void SinglePageInfo::Swap(SinglePageInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    rows_.Swap(&other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SinglePageInfo::GetTypeName() const {
  return "cloudbox.protobuf.SinglePageInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int HomePageInfo::kCodeFieldNumber;
const int HomePageInfo::kVersionFieldNumber;
const int HomePageInfo::kTotalFieldNumber;
const int HomePageInfo::kResultFieldNumber;
const int HomePageInfo::kHasMenuFieldNumber;
const int HomePageInfo::kTitleFieldNumber;
const int HomePageInfo::kDefaultPageFieldNumber;
const int HomePageInfo::kBackgroundFieldNumber;
const int HomePageInfo::kIdFieldNumber;
const int HomePageInfo::kOffsetXFieldNumber;
const int HomePageInfo::kOffsetYFieldNumber;
const int HomePageInfo::kOrderdescFieldNumber;
#endif  // !_MSC_VER

HomePageInfo::HomePageInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void HomePageInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  background_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  background_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
}

HomePageInfo::HomePageInfo(const HomePageInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void HomePageInfo::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  version_ = 0;
  total_ = 0;
  hasmenu_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defaultpage_ = 0;
  background_ = NULL;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offsetx_ = 0;
  offsety_ = 0;
  orderdesc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HomePageInfo::~HomePageInfo() {
  SharedDtor();
}

void HomePageInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete background_;
  }
}

void HomePageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HomePageInfo& HomePageInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_homepageinfo_5fresponse_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_homepageinfo_5fresponse_2eproto();
#endif
  return *default_instance_;
}

HomePageInfo* HomePageInfo::default_instance_ = NULL;

HomePageInfo* HomePageInfo::New() const {
  return new HomePageInfo;
}

void HomePageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    version_ = 0;
    total_ = 0;
    hasmenu_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    defaultpage_ = 0;
    if (has_background()) {
      if (background_ != NULL) background_->::cloudbox::protobuf::ImageInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    offsetx_ = 0;
    offsety_ = 0;
    orderdesc_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool HomePageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total;
        break;
      }

      // optional int32 total = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // repeated .cloudbox.protobuf.SinglePageInfo result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result;
        if (input->ExpectTag(40)) goto parse_hasMenu;
        break;
      }

      // optional int32 hasMenu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasMenu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasmenu_)));
          set_has_hasmenu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_title;
        break;
      }

      // optional string title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_defaultPage;
        break;
      }

      // optional int32 defaultPage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defaultPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defaultpage_)));
          set_has_defaultpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_background;
        break;
      }

      // optional .cloudbox.protobuf.ImageInfo background = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_background:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_background()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_id;
        break;
      }

      // optional string id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_offsetX;
        break;
      }

      // optional float offsetX = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_offsetY;
        break;
      }

      // optional float offsetY = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsety_)));
          set_has_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_orderdesc;
        break;
      }

      // optional int32 orderdesc = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderdesc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderdesc_)));
          set_has_orderdesc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HomePageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // optional int32 total = 3;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total(), output);
  }

  // repeated .cloudbox.protobuf.SinglePageInfo result = 4;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->result(i), output);
  }

  // optional int32 hasMenu = 5;
  if (has_hasmenu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hasmenu(), output);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->title(), output);
  }

  // optional int32 defaultPage = 7;
  if (has_defaultpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->defaultpage(), output);
  }

  // optional .cloudbox.protobuf.ImageInfo background = 8;
  if (has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->background(), output);
  }

  // optional string id = 9;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->id(), output);
  }

  // optional float offsetX = 10;
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->offsetx(), output);
  }

  // optional float offsetY = 11;
  if (has_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->offsety(), output);
  }

  // optional int32 orderdesc = 12;
  if (has_orderdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->orderdesc(), output);
  }

}

int HomePageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 total = 3;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 hasMenu = 5;
    if (has_hasmenu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasmenu());
    }

    // optional string title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional int32 defaultPage = 7;
    if (has_defaultpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defaultpage());
    }

    // optional .cloudbox.protobuf.ImageInfo background = 8;
    if (has_background()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->background());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string id = 9;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional float offsetX = 10;
    if (has_offsetx()) {
      total_size += 1 + 4;
    }

    // optional float offsetY = 11;
    if (has_offsety()) {
      total_size += 1 + 4;
    }

    // optional int32 orderdesc = 12;
    if (has_orderdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderdesc());
    }

  }
  // repeated .cloudbox.protobuf.SinglePageInfo result = 4;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomePageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HomePageInfo*>(&from));
}

void HomePageInfo::MergeFrom(const HomePageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_hasmenu()) {
      set_hasmenu(from.hasmenu());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_defaultpage()) {
      set_defaultpage(from.defaultpage());
    }
    if (from.has_background()) {
      mutable_background()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.background());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
    if (from.has_offsety()) {
      set_offsety(from.offsety());
    }
    if (from.has_orderdesc()) {
      set_orderdesc(from.orderdesc());
    }
  }
}

void HomePageInfo::CopyFrom(const HomePageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomePageInfo::IsInitialized() const {

  return true;
}

void HomePageInfo::Swap(HomePageInfo* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(version_, other->version_);
    std::swap(total_, other->total_);
    result_.Swap(&other->result_);
    std::swap(hasmenu_, other->hasmenu_);
    std::swap(title_, other->title_);
    std::swap(defaultpage_, other->defaultpage_);
    std::swap(background_, other->background_);
    std::swap(id_, other->id_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(offsety_, other->offsety_);
    std::swap(orderdesc_, other->orderdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HomePageInfo::GetTypeName() const {
  return "cloudbox.protobuf.HomePageInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)
