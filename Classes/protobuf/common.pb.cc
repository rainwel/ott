// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace cloudbox {
namespace protobuf {

void protobuf_ShutdownFile_common_2eproto() {
  delete TargetInfo::default_instance_;
  delete ImageInfo::default_instance_;
  delete IconInfo::default_instance_;
  delete BoxColorInfo::default_instance_;
  delete EffectInfo::default_instance_;
  delete LineInfo::default_instance_;
  delete LineInfo_Split::default_instance_;
  delete BoxInfo::default_instance_;
  delete PlayUrlInfo::default_instance_;
  delete PlaySiteInfo::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_common_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  TargetInfo::default_instance_ = new TargetInfo();
  ImageInfo::default_instance_ = new ImageInfo();
  IconInfo::default_instance_ = new IconInfo();
  BoxColorInfo::default_instance_ = new BoxColorInfo();
  EffectInfo::default_instance_ = new EffectInfo();
  LineInfo::default_instance_ = new LineInfo();
  LineInfo_Split::default_instance_ = new LineInfo_Split();
  BoxInfo::default_instance_ = new BoxInfo();
  PlayUrlInfo::default_instance_ = new PlayUrlInfo();
  PlaySiteInfo::default_instance_ = new PlaySiteInfo();
  TargetInfo::default_instance_->InitAsDefaultInstance();
  ImageInfo::default_instance_->InitAsDefaultInstance();
  IconInfo::default_instance_->InitAsDefaultInstance();
  BoxColorInfo::default_instance_->InitAsDefaultInstance();
  EffectInfo::default_instance_->InitAsDefaultInstance();
  LineInfo::default_instance_->InitAsDefaultInstance();
  LineInfo_Split::default_instance_->InitAsDefaultInstance();
  BoxInfo::default_instance_->InitAsDefaultInstance();
  PlayUrlInfo::default_instance_->InitAsDefaultInstance();
  PlaySiteInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_common_2eproto_once_);
void protobuf_AddDesc_common_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_common_2eproto_once_,
                 &protobuf_AddDesc_common_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
#endif

// ===================================================================

bool TargetInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TargetInfo_Type TargetInfo::OVERLAY;
const TargetInfo_Type TargetInfo::FRAME;
const TargetInfo_Type TargetInfo::PLAY;
const TargetInfo_Type TargetInfo::SETTING;
const TargetInfo_Type TargetInfo::SEARCH;
const TargetInfo_Type TargetInfo::RECENTVIEW;
const TargetInfo_Type TargetInfo::FAV;
const TargetInfo_Type TargetInfo::LISTFAVS;
const TargetInfo_Type TargetInfo::FILTER;
const TargetInfo_Type TargetInfo::DIALOG;
const TargetInfo_Type TargetInfo::HOTPROGRAMS;
const TargetInfo_Type TargetInfo::LIVE;
const TargetInfo_Type TargetInfo::CHECKUPDATE;
const TargetInfo_Type TargetInfo::LAUNCHAPP;
const TargetInfo_Type TargetInfo::LISTAPP;
const TargetInfo_Type TargetInfo::RESET;
const TargetInfo_Type TargetInfo::QUIT;
const TargetInfo_Type TargetInfo::BAIDULOGIN;
const TargetInfo_Type TargetInfo::BAIDUDIMCODELOGIN;
const TargetInfo_Type TargetInfo::BAIDULIST;
const TargetInfo_Type TargetInfo::CHANNELMANAGE;
const TargetInfo_Type TargetInfo::CHANNELADD;
const TargetInfo_Type TargetInfo::Type_MIN;
const TargetInfo_Type TargetInfo::Type_MAX;
const int TargetInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
bool TargetInfo_FrameType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TargetInfo_FrameType TargetInfo::HOME;
const TargetInfo_FrameType TargetInfo::LISTs;
const TargetInfo_FrameType TargetInfo::DETAIL;
const TargetInfo_FrameType TargetInfo::FrameType_MIN;
const TargetInfo_FrameType TargetInfo::FrameType_MAX;
const int TargetInfo::FrameType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TargetInfo::kTypeFieldNumber;
const int TargetInfo::kFrameTypeFieldNumber;
const int TargetInfo::kDataFieldNumber;
const int TargetInfo::kChannelFieldNumber;
const int TargetInfo::kLeftNavShowFieldNumber;
const int TargetInfo::kLeftNavFocusFieldNumber;
#endif  // !_MSC_VER

TargetInfo::TargetInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TargetInfo::InitAsDefaultInstance() {
}

TargetInfo::TargetInfo(const TargetInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TargetInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  frametype_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leftnavshow_ = 0;
  leftnavfocus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetInfo::~TargetInfo() {
  SharedDtor();
}

void TargetInfo::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TargetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TargetInfo& TargetInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

TargetInfo* TargetInfo::default_instance_ = NULL;

TargetInfo* TargetInfo::New() const {
  return new TargetInfo;
}

void TargetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    frametype_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    leftnavshow_ = 0;
    leftnavfocus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TargetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cloudbox.protobuf.TargetInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloudbox::protobuf::TargetInfo_Type_IsValid(value)) {
            set_type(static_cast< ::cloudbox::protobuf::TargetInfo_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_frameType;
        break;
      }

      // optional .cloudbox.protobuf.TargetInfo.FrameType frameType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloudbox::protobuf::TargetInfo_FrameType_IsValid(value)) {
            set_frametype(static_cast< ::cloudbox::protobuf::TargetInfo_FrameType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_channel;
        break;
      }

      // optional string channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leftNavShow;
        break;
      }

      // optional int32 leftNavShow = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftNavShow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftnavshow_)));
          set_has_leftnavshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leftNavFocus;
        break;
      }

      // optional int32 leftNavFocus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftNavFocus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftnavfocus_)));
          set_has_leftnavfocus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TargetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cloudbox.protobuf.TargetInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .cloudbox.protobuf.TargetInfo.FrameType frameType = 2;
  if (has_frametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->frametype(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data(), output);
  }

  // optional string channel = 5;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->channel(), output);
  }

  // optional int32 leftNavShow = 6;
  if (has_leftnavshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->leftnavshow(), output);
  }

  // optional int32 leftNavFocus = 7;
  if (has_leftnavfocus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->leftnavfocus(), output);
  }

}

int TargetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cloudbox.protobuf.TargetInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .cloudbox.protobuf.TargetInfo.FrameType frameType = 2;
    if (has_frametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->frametype());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional string channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional int32 leftNavShow = 6;
    if (has_leftnavshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftnavshow());
    }

    // optional int32 leftNavFocus = 7;
    if (has_leftnavfocus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftnavfocus());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TargetInfo*>(&from));
}

void TargetInfo::MergeFrom(const TargetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_frametype()) {
      set_frametype(from.frametype());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_leftnavshow()) {
      set_leftnavshow(from.leftnavshow());
    }
    if (from.has_leftnavfocus()) {
      set_leftnavfocus(from.leftnavfocus());
    }
  }
}

void TargetInfo::CopyFrom(const TargetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetInfo::IsInitialized() const {

  return true;
}

void TargetInfo::Swap(TargetInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(frametype_, other->frametype_);
    std::swap(data_, other->data_);
    std::swap(channel_, other->channel_);
    std::swap(leftnavshow_, other->leftnavshow_);
    std::swap(leftnavfocus_, other->leftnavfocus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TargetInfo::GetTypeName() const {
  return "cloudbox.protobuf.TargetInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int ImageInfo::kWidthFieldNumber;
const int ImageInfo::kHeightFieldNumber;
const int ImageInfo::kUrlFieldNumber;
#endif  // !_MSC_VER

ImageInfo::ImageInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ImageInfo::InitAsDefaultInstance() {
}

ImageInfo::ImageInfo(const ImageInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ImageInfo::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageInfo::~ImageInfo() {
  SharedDtor();
}

void ImageInfo::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageInfo& ImageInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

ImageInfo* ImageInfo::default_instance_ = NULL;

ImageInfo* ImageInfo::New() const {
  return new ImageInfo;
}

void ImageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // optional float height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // optional float height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

}

int ImageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float width = 1;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 2;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageInfo*>(&from));
}

void ImageInfo::MergeFrom(const ImageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
}

void ImageInfo::CopyFrom(const ImageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageInfo::IsInitialized() const {

  return true;
}

void ImageInfo::Swap(ImageInfo* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ImageInfo::GetTypeName() const {
  return "cloudbox.protobuf.ImageInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int IconInfo::kWidthFieldNumber;
const int IconInfo::kHeightFieldNumber;
const int IconInfo::kUrlFieldNumber;
const int IconInfo::kDirectionFieldNumber;
const int IconInfo::kOffsetFieldNumber;
const int IconInfo::kTargetFieldNumber;
#endif  // !_MSC_VER

IconInfo::IconInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void IconInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  target_ = const_cast< ::cloudbox::protobuf::TargetInfo*>(
      ::cloudbox::protobuf::TargetInfo::internal_default_instance());
#else
  target_ = const_cast< ::cloudbox::protobuf::TargetInfo*>(&::cloudbox::protobuf::TargetInfo::default_instance());
#endif
}

IconInfo::IconInfo(const IconInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void IconInfo::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  direction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offset_ = 0;
  target_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IconInfo::~IconInfo() {
  SharedDtor();
}

void IconInfo::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (direction_ != &::google::protobuf::internal::kEmptyString) {
    delete direction_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete target_;
  }
}

void IconInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const IconInfo& IconInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

IconInfo* IconInfo::default_instance_ = NULL;

IconInfo* IconInfo::New() const {
  return new IconInfo;
}

void IconInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_direction()) {
      if (direction_ != &::google::protobuf::internal::kEmptyString) {
        direction_->clear();
      }
    }
    offset_ = 0;
    if (has_target()) {
      if (target_ != NULL) target_->::cloudbox::protobuf::TargetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool IconInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // optional float height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_direction;
        break;
      }

      // optional string direction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_offset;
        break;
      }

      // optional float offset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_target;
        break;
      }

      // optional .cloudbox.protobuf.TargetInfo target = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IconInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // optional float height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional string direction = 4;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->direction(), output);
  }

  // optional float offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->offset(), output);
  }

  // optional .cloudbox.protobuf.TargetInfo target = 6;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->target(), output);
  }

}

int IconInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float width = 1;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 2;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string direction = 4;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->direction());
    }

    // optional float offset = 5;
    if (has_offset()) {
      total_size += 1 + 4;
    }

    // optional .cloudbox.protobuf.TargetInfo target = 6;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IconInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const IconInfo*>(&from));
}

void IconInfo::MergeFrom(const IconInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_target()) {
      mutable_target()->::cloudbox::protobuf::TargetInfo::MergeFrom(from.target());
    }
  }
}

void IconInfo::CopyFrom(const IconInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IconInfo::IsInitialized() const {

  return true;
}

void IconInfo::Swap(IconInfo* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(url_, other->url_);
    std::swap(direction_, other->direction_);
    std::swap(offset_, other->offset_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string IconInfo::GetTypeName() const {
  return "cloudbox.protobuf.IconInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int BoxColorInfo::kRedFieldNumber;
const int BoxColorInfo::kGreenFieldNumber;
const int BoxColorInfo::kBlueFieldNumber;
const int BoxColorInfo::kAlphaFieldNumber;
#endif  // !_MSC_VER

BoxColorInfo::BoxColorInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BoxColorInfo::InitAsDefaultInstance() {
}

BoxColorInfo::BoxColorInfo(const BoxColorInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BoxColorInfo::SharedCtor() {
  _cached_size_ = 0;
  red_ = 0;
  green_ = 0;
  blue_ = 0;
  alpha_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxColorInfo::~BoxColorInfo() {
  SharedDtor();
}

void BoxColorInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BoxColorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BoxColorInfo& BoxColorInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

BoxColorInfo* BoxColorInfo::default_instance_ = NULL;

BoxColorInfo* BoxColorInfo::New() const {
  return new BoxColorInfo;
}

void BoxColorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    red_ = 0;
    green_ = 0;
    blue_ = 0;
    alpha_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BoxColorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 red = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &red_)));
          set_has_red();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_green;
        break;
      }

      // optional int32 green = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &green_)));
          set_has_green();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_blue;
        break;
      }

      // optional int32 blue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_)));
          set_has_blue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_alpha;
        break;
      }

      // optional int32 alpha = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoxColorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 red = 1;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->red(), output);
  }

  // optional int32 green = 2;
  if (has_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->green(), output);
  }

  // optional int32 blue = 3;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blue(), output);
  }

  // optional int32 alpha = 4;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->alpha(), output);
  }

}

int BoxColorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 red = 1;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->red());
    }

    // optional int32 green = 2;
    if (has_green()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->green());
    }

    // optional int32 blue = 3;
    if (has_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blue());
    }

    // optional int32 alpha = 4;
    if (has_alpha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alpha());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxColorInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BoxColorInfo*>(&from));
}

void BoxColorInfo::MergeFrom(const BoxColorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_green()) {
      set_green(from.green());
    }
    if (from.has_blue()) {
      set_blue(from.blue());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
  }
}

void BoxColorInfo::CopyFrom(const BoxColorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxColorInfo::IsInitialized() const {

  return true;
}

void BoxColorInfo::Swap(BoxColorInfo* other) {
  if (other != this) {
    std::swap(red_, other->red_);
    std::swap(green_, other->green_);
    std::swap(blue_, other->blue_);
    std::swap(alpha_, other->alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BoxColorInfo::GetTypeName() const {
  return "cloudbox.protobuf.BoxColorInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int EffectInfo::kIntervalFieldNumber;
#endif  // !_MSC_VER

EffectInfo::EffectInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EffectInfo::InitAsDefaultInstance() {
}

EffectInfo::EffectInfo(const EffectInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EffectInfo::SharedCtor() {
  _cached_size_ = 0;
  interval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectInfo::~EffectInfo() {
  SharedDtor();
}

void EffectInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EffectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EffectInfo& EffectInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

EffectInfo* EffectInfo::default_instance_ = NULL;

EffectInfo* EffectInfo::New() const {
  return new EffectInfo;
}

void EffectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    interval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EffectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 interval = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EffectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 interval = 1;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->interval(), output);
  }

}

int EffectInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 interval = 1;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EffectInfo*>(&from));
}

void EffectInfo::MergeFrom(const EffectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
}

void EffectInfo::CopyFrom(const EffectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectInfo::IsInitialized() const {

  return true;
}

void EffectInfo::Swap(EffectInfo* other) {
  if (other != this) {
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EffectInfo::GetTypeName() const {
  return "cloudbox.protobuf.EffectInfo";
}


// ===================================================================

bool LineInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LineInfo_Type LineInfo::SINGLE;
const LineInfo_Type LineInfo::KEYVALUES;
const LineInfo_Type LineInfo::SPLIT;
const LineInfo_Type LineInfo::Type_MIN;
const LineInfo_Type LineInfo::Type_MAX;
const int LineInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
bool LineInfo_Split_Direction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LineInfo_Split_Direction LineInfo_Split::LEFTTORIGHT;
const LineInfo_Split_Direction LineInfo_Split::RIGHTTOLEFT;
const LineInfo_Split_Direction LineInfo_Split::Direction_MIN;
const LineInfo_Split_Direction LineInfo_Split::Direction_MAX;
const int LineInfo_Split::Direction_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LineInfo_Split::kImgFieldNumber;
const int LineInfo_Split::kNameFieldNumber;
const int LineInfo_Split::kScoreFieldNumber;
#endif  // !_MSC_VER

LineInfo_Split::LineInfo_Split()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LineInfo_Split::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  img_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  img_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
}

LineInfo_Split::LineInfo_Split(const LineInfo_Split& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LineInfo_Split::SharedCtor() {
  _cached_size_ = 0;
  img_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineInfo_Split::~LineInfo_Split() {
  SharedDtor();
}

void LineInfo_Split::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete img_;
  }
}

void LineInfo_Split::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LineInfo_Split& LineInfo_Split::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

LineInfo_Split* LineInfo_Split::default_instance_ = NULL;

LineInfo_Split* LineInfo_Split::New() const {
  return new LineInfo_Split;
}

void LineInfo_Split::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_img()) {
      if (img_ != NULL) img_->::cloudbox::protobuf::ImageInfo::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LineInfo_Split::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cloudbox.protobuf.ImageInfo img = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineInfo_Split::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cloudbox.protobuf.ImageInfo img = 1;
  if (has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->img(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

}

int LineInfo_Split::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cloudbox.protobuf.ImageInfo img = 1;
    if (has_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineInfo_Split::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LineInfo_Split*>(&from));
}

void LineInfo_Split::MergeFrom(const LineInfo_Split& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_img()) {
      mutable_img()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.img());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void LineInfo_Split::CopyFrom(const LineInfo_Split& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineInfo_Split::IsInitialized() const {

  return true;
}

void LineInfo_Split::Swap(LineInfo_Split* other) {
  if (other != this) {
    std::swap(img_, other->img_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LineInfo_Split::GetTypeName() const {
  return "cloudbox.protobuf.LineInfo.Split";
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LineInfo::kTypeFieldNumber;
const int LineInfo::kKeyFieldNumber;
const int LineInfo::kValuesFieldNumber;
const int LineInfo::kLeftFieldNumber;
const int LineInfo::kRightFieldNumber;
#endif  // !_MSC_VER

LineInfo::LineInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LineInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  left_ = const_cast< ::cloudbox::protobuf::LineInfo_Split*>(
      ::cloudbox::protobuf::LineInfo_Split::internal_default_instance());
#else
  left_ = const_cast< ::cloudbox::protobuf::LineInfo_Split*>(&::cloudbox::protobuf::LineInfo_Split::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  right_ = const_cast< ::cloudbox::protobuf::LineInfo_Split*>(
      ::cloudbox::protobuf::LineInfo_Split::internal_default_instance());
#else
  right_ = const_cast< ::cloudbox::protobuf::LineInfo_Split*>(&::cloudbox::protobuf::LineInfo_Split::default_instance());
#endif
}

LineInfo::LineInfo(const LineInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LineInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  left_ = NULL;
  right_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineInfo::~LineInfo() {
  SharedDtor();
}

void LineInfo::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete left_;
    delete right_;
  }
}

void LineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LineInfo& LineInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

LineInfo* LineInfo::default_instance_ = NULL;

LineInfo* LineInfo::New() const {
  return new LineInfo;
}

void LineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_left()) {
      if (left_ != NULL) left_->::cloudbox::protobuf::LineInfo_Split::Clear();
    }
    if (has_right()) {
      if (right_ != NULL) right_->::cloudbox::protobuf::LineInfo_Split::Clear();
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cloudbox.protobuf.LineInfo.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloudbox::protobuf::LineInfo_Type_IsValid(value)) {
            set_type(static_cast< ::cloudbox::protobuf::LineInfo_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }

      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }

      // repeated string values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        if (input->ExpectTag(34)) goto parse_left;
        break;
      }

      // optional .cloudbox.protobuf.LineInfo.Split left = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_left:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_left()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_right;
        break;
      }

      // optional .cloudbox.protobuf.LineInfo.Split right = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cloudbox.protobuf.LineInfo.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }

  // repeated string values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->values(i), output);
  }

  // optional .cloudbox.protobuf.LineInfo.Split left = 4;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->left(), output);
  }

  // optional .cloudbox.protobuf.LineInfo.Split right = 5;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->right(), output);
  }

}

int LineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cloudbox.protobuf.LineInfo.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional .cloudbox.protobuf.LineInfo.Split left = 4;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left());
    }

    // optional .cloudbox.protobuf.LineInfo.Split right = 5;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right());
    }

  }
  // repeated string values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LineInfo*>(&from));
}

void LineInfo::MergeFrom(const LineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_left()) {
      mutable_left()->::cloudbox::protobuf::LineInfo_Split::MergeFrom(from.left());
    }
    if (from.has_right()) {
      mutable_right()->::cloudbox::protobuf::LineInfo_Split::MergeFrom(from.right());
    }
  }
}

void LineInfo::CopyFrom(const LineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineInfo::IsInitialized() const {

  return true;
}

void LineInfo::Swap(LineInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(key_, other->key_);
    values_.Swap(&other->values_);
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LineInfo::GetTypeName() const {
  return "cloudbox.protobuf.LineInfo";
}


// ===================================================================

bool BoxInfo_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BoxInfo_Type BoxInfo::INVALID;
const BoxInfo_Type BoxInfo::ACTION;
const BoxInfo_Type BoxInfo::VIDEO;
const BoxInfo_Type BoxInfo::IMAGETEXT;
const BoxInfo_Type BoxInfo::IMAGE;
const BoxInfo_Type BoxInfo::SCROLL;
const BoxInfo_Type BoxInfo::SEARCH;
const BoxInfo_Type BoxInfo::LASTVIEW;
const BoxInfo_Type BoxInfo::FAV;
const BoxInfo_Type BoxInfo::RANK;
const BoxInfo_Type BoxInfo::FILTER;
const BoxInfo_Type BoxInfo::TEXT;
const BoxInfo_Type BoxInfo::IMAGESTAR;
const BoxInfo_Type BoxInfo::DOUBLELINE;
const BoxInfo_Type BoxInfo::GRAYDOUBLELINE;
const BoxInfo_Type BoxInfo::DESCRIPTION;
const BoxInfo_Type BoxInfo::FOOTERBOTTON;
const BoxInfo_Type BoxInfo::LIVE;
const BoxInfo_Type BoxInfo::APPBOX;
const BoxInfo_Type BoxInfo::USERPREFILE;
const BoxInfo_Type BoxInfo::USERFUND;
const BoxInfo_Type BoxInfo::USERTOP;
const BoxInfo_Type BoxInfo::USERGAME;
const BoxInfo_Type BoxInfo::Type_MIN;
const BoxInfo_Type BoxInfo::Type_MAX;
const int BoxInfo::Type_ARRAYSIZE;
#endif  // _MSC_VER
bool BoxInfo_Tag_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BoxInfo_Tag BoxInfo::NORMAL;
const BoxInfo_Tag BoxInfo::DISABLED;
const BoxInfo_Tag BoxInfo::CHECKFAV;
const BoxInfo_Tag BoxInfo::ACTFAV;
const BoxInfo_Tag BoxInfo::PLAY;
const BoxInfo_Tag BoxInfo::SELECTEPISODE;
const BoxInfo_Tag BoxInfo::Tag_MIN;
const BoxInfo_Tag BoxInfo::Tag_MAX;
const int BoxInfo::Tag_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BoxInfo::kWidthFieldNumber;
const int BoxInfo::kHeightFieldNumber;
const int BoxInfo::kUrlFieldNumber;
const int BoxInfo::kImgFieldNumber;
const int BoxInfo::kTypeFieldNumber;
const int BoxInfo::kFocusableFieldNumber;
const int BoxInfo::kChannelFieldNumber;
const int BoxInfo::kIdFieldNumber;
const int BoxInfo::kTitleFieldNumber;
const int BoxInfo::kSubTitleFieldNumber;
const int BoxInfo::kScoreFieldNumber;
const int BoxInfo::kEpisodeFieldNumber;
const int BoxInfo::kTotalEpisodeFieldNumber;
const int BoxInfo::kIsFinishedFieldNumber;
const int BoxInfo::kDescriptionFieldNumber;
const int BoxInfo::kLinesFieldNumber;
const int BoxInfo::kFormatFieldNumber;
const int BoxInfo::kIconFieldNumber;
const int BoxInfo::kSiteFieldNumber;
const int BoxInfo::kTargetFieldNumber;
const int BoxInfo::kRankFieldNumber;
const int BoxInfo::kLengthFieldNumber;
const int BoxInfo::kTotalLengthFieldNumber;
const int BoxInfo::kBackgroundFieldNumber;
const int BoxInfo::kTagFieldNumber;
const int BoxInfo::kSiteNameFieldNumber;
const int BoxInfo::kUpdatedFieldNumber;
const int BoxInfo::kAppIconFieldNumber;
const int BoxInfo::kStageFieldNumber;
const int BoxInfo::kPlayNumFieldNumber;
const int BoxInfo::kPlayNumTitleFieldNumber;
const int BoxInfo::kMImgFieldNumber;
const int BoxInfo::kTsFieldNumber;
const int BoxInfo::kFixedImgFieldNumber;
const int BoxInfo::kShowTitleFieldNumber;
const int BoxInfo::kIconsFieldNumber;
const int BoxInfo::kEffectTypeFieldNumber;
const int BoxInfo::kEffectInfoFieldNumber;
const int BoxInfo::kSpacingFieldNumber;
const int BoxInfo::kBoxColorFieldNumber;
#endif  // !_MSC_VER

BoxInfo::BoxInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BoxInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  img_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  img_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  icon_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  icon_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  target_ = const_cast< ::cloudbox::protobuf::TargetInfo*>(
      ::cloudbox::protobuf::TargetInfo::internal_default_instance());
#else
  target_ = const_cast< ::cloudbox::protobuf::TargetInfo*>(&::cloudbox::protobuf::TargetInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  background_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  background_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mimg_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  mimg_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fixedimg_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  fixedimg_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  effectinfo_ = const_cast< ::cloudbox::protobuf::EffectInfo*>(
      ::cloudbox::protobuf::EffectInfo::internal_default_instance());
#else
  effectinfo_ = const_cast< ::cloudbox::protobuf::EffectInfo*>(&::cloudbox::protobuf::EffectInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  boxcolor_ = const_cast< ::cloudbox::protobuf::BoxColorInfo*>(
      ::cloudbox::protobuf::BoxColorInfo::internal_default_instance());
#else
  boxcolor_ = const_cast< ::cloudbox::protobuf::BoxColorInfo*>(&::cloudbox::protobuf::BoxColorInfo::default_instance());
#endif
}

BoxInfo::BoxInfo(const BoxInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BoxInfo::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  img_ = NULL;
  type_ = 0;
  focusable_ = 0;
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  episode_ = 0;
  totalepisode_ = 0;
  isfinished_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = NULL;
  site_ = 0;
  target_ = NULL;
  rank_ = 0;
  length_ = 0;
  totallength_ = 0;
  background_ = NULL;
  tag_ = 1;
  sitename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  updated_ = 0;
  appicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playnum_ = 0;
  playnumtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mimg_ = NULL;
  ts_ = 0;
  fixedimg_ = NULL;
  showtitle_ = 0;
  effecttype_ = 0;
  effectinfo_ = NULL;
  spacing_ = 0;
  boxcolor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoxInfo::~BoxInfo() {
  SharedDtor();
}

void BoxInfo::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (subtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete subtitle_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    delete format_;
  }
  if (sitename_ != &::google::protobuf::internal::kEmptyString) {
    delete sitename_;
  }
  if (appicon_ != &::google::protobuf::internal::kEmptyString) {
    delete appicon_;
  }
  if (stage_ != &::google::protobuf::internal::kEmptyString) {
    delete stage_;
  }
  if (playnumtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete playnumtitle_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete img_;
    delete icon_;
    delete target_;
    delete background_;
    delete mimg_;
    delete fixedimg_;
    delete effectinfo_;
    delete boxcolor_;
  }
}

void BoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BoxInfo& BoxInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

BoxInfo* BoxInfo::default_instance_ = NULL;

BoxInfo* BoxInfo::New() const {
  return new BoxInfo;
}

void BoxInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    height_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_img()) {
      if (img_ != NULL) img_->::cloudbox::protobuf::ImageInfo::Clear();
    }
    type_ = 0;
    focusable_ = 0;
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_subtitle()) {
      if (subtitle_ != &::google::protobuf::internal::kEmptyString) {
        subtitle_->clear();
      }
    }
    score_ = 0;
    episode_ = 0;
    totalepisode_ = 0;
    isfinished_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::kEmptyString) {
        format_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != NULL) icon_->::cloudbox::protobuf::ImageInfo::Clear();
    }
    site_ = 0;
    if (has_target()) {
      if (target_ != NULL) target_->::cloudbox::protobuf::TargetInfo::Clear();
    }
    rank_ = 0;
    length_ = 0;
    totallength_ = 0;
    if (has_background()) {
      if (background_ != NULL) background_->::cloudbox::protobuf::ImageInfo::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    tag_ = 1;
    if (has_sitename()) {
      if (sitename_ != &::google::protobuf::internal::kEmptyString) {
        sitename_->clear();
      }
    }
    updated_ = 0;
    if (has_appicon()) {
      if (appicon_ != &::google::protobuf::internal::kEmptyString) {
        appicon_->clear();
      }
    }
    if (has_stage()) {
      if (stage_ != &::google::protobuf::internal::kEmptyString) {
        stage_->clear();
      }
    }
    playnum_ = 0;
    if (has_playnumtitle()) {
      if (playnumtitle_ != &::google::protobuf::internal::kEmptyString) {
        playnumtitle_->clear();
      }
    }
    if (has_mimg()) {
      if (mimg_ != NULL) mimg_->::cloudbox::protobuf::ImageInfo::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    ts_ = 0;
    if (has_fixedimg()) {
      if (fixedimg_ != NULL) fixedimg_->::cloudbox::protobuf::ImageInfo::Clear();
    }
    showtitle_ = 0;
    effecttype_ = 0;
    if (has_effectinfo()) {
      if (effectinfo_ != NULL) effectinfo_->::cloudbox::protobuf::EffectInfo::Clear();
    }
    spacing_ = 0;
    if (has_boxcolor()) {
      if (boxcolor_ != NULL) boxcolor_->::cloudbox::protobuf::BoxColorInfo::Clear();
    }
  }
  lines_.Clear();
  icons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_height;
        break;
      }

      // optional float height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_img;
        break;
      }

      // optional .cloudbox.protobuf.ImageInfo img = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_img()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .cloudbox.protobuf.BoxInfo.Type type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloudbox::protobuf::BoxInfo_Type_IsValid(value)) {
            set_type(static_cast< ::cloudbox::protobuf::BoxInfo_Type >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_focusable;
        break;
      }

      // optional int32 focusable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_focusable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &focusable_)));
          set_has_focusable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_channel;
        break;
      }

      // optional string channel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_id;
        break;
      }

      // optional string id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_title;
        break;
      }

      // optional string title = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_subTitle;
        break;
      }

      // optional string subTitle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subtitle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_score;
        break;
      }

      // optional int32 score = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_episode;
        break;
      }

      // optional int32 episode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_episode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &episode_)));
          set_has_episode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_totalEpisode;
        break;
      }

      // optional int32 totalEpisode = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalEpisode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalepisode_)));
          set_has_totalepisode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_isFinished;
        break;
      }

      // optional int32 isFinished = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFinished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfinished_)));
          set_has_isfinished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_description;
        break;
      }

      // optional string description = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_lines;
        break;
      }

      // repeated .cloudbox.protobuf.LineInfo lines = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_lines;
        if (input->ExpectTag(138)) goto parse_format;
        break;
      }

      // optional string format = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_icon;
        break;
      }

      // optional .cloudbox.protobuf.ImageInfo icon = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_site;
        break;
      }

      // optional int32 site = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_site:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &site_)));
          set_has_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_target;
        break;
      }

      // optional .cloudbox.protobuf.TargetInfo target = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_rank;
        break;
      }

      // optional int32 rank = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_length;
        break;
      }

      // optional int32 length = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_totalLength;
        break;
      }

      // optional int32 totalLength = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totallength_)));
          set_has_totallength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_background;
        break;
      }

      // optional .cloudbox.protobuf.ImageInfo background = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_background:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_background()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_tag;
        break;
      }

      // optional .cloudbox.protobuf.BoxInfo.Tag tag = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloudbox::protobuf::BoxInfo_Tag_IsValid(value)) {
            set_tag(static_cast< ::cloudbox::protobuf::BoxInfo_Tag >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_siteName;
        break;
      }

      // optional string siteName = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_siteName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sitename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_updated;
        break;
      }

      // optional int32 updated = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updated_)));
          set_has_updated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_appIcon;
        break;
      }

      // optional bytes appIcon = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_appicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_stage;
        break;
      }

      // optional string stage = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_playNum;
        break;
      }

      // optional int32 playNum = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playnum_)));
          set_has_playnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_playNumTitle;
        break;
      }

      // optional string playNumTitle = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playNumTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playnumtitle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_mImg;
        break;
      }

      // optional .cloudbox.protobuf.ImageInfo mImg = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mimg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_ts;
        break;
      }

      // optional int32 ts = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_fixedImg;
        break;
      }

      // optional .cloudbox.protobuf.ImageInfo fixedImg = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fixedImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixedimg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_showTitle;
        break;
      }

      // optional int32 showTitle = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showtitle_)));
          set_has_showtitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_icons;
        break;
      }

      // repeated .cloudbox.protobuf.IconInfo icons = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_icons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_icons;
        if (input->ExpectTag(296)) goto parse_effectType;
        break;
      }

      // optional int32 effectType = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effecttype_)));
          set_has_effecttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_effectInfo;
        break;
      }

      // optional .cloudbox.protobuf.EffectInfo effectInfo = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effectInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effectinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_spacing;
        break;
      }

      // optional int32 spacing = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spacing_)));
          set_has_spacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_boxColor;
        break;
      }

      // optional .cloudbox.protobuf.BoxColorInfo boxColor = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boxcolor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // optional float height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional .cloudbox.protobuf.ImageInfo img = 4;
  if (has_img()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->img(), output);
  }

  // optional .cloudbox.protobuf.BoxInfo.Type type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional int32 focusable = 6;
  if (has_focusable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->focusable(), output);
  }

  // optional string channel = 7;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->channel(), output);
  }

  // optional string id = 8;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->id(), output);
  }

  // optional string title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->title(), output);
  }

  // optional string subTitle = 10;
  if (has_subtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->subtitle(), output);
  }

  // optional int32 score = 11;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->score(), output);
  }

  // optional int32 episode = 12;
  if (has_episode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->episode(), output);
  }

  // optional int32 totalEpisode = 13;
  if (has_totalepisode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->totalepisode(), output);
  }

  // optional int32 isFinished = 14;
  if (has_isfinished()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->isfinished(), output);
  }

  // optional string description = 15;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->description(), output);
  }

  // repeated .cloudbox.protobuf.LineInfo lines = 16;
  for (int i = 0; i < this->lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->lines(i), output);
  }

  // optional string format = 17;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->format(), output);
  }

  // optional .cloudbox.protobuf.ImageInfo icon = 18;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->icon(), output);
  }

  // optional int32 site = 19;
  if (has_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->site(), output);
  }

  // optional .cloudbox.protobuf.TargetInfo target = 20;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->target(), output);
  }

  // optional int32 rank = 21;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->rank(), output);
  }

  // optional int32 length = 22;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->length(), output);
  }

  // optional int32 totalLength = 23;
  if (has_totallength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->totallength(), output);
  }

  // optional .cloudbox.protobuf.ImageInfo background = 24;
  if (has_background()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->background(), output);
  }

  // optional .cloudbox.protobuf.BoxInfo.Tag tag = 25;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->tag(), output);
  }

  // optional string siteName = 26;
  if (has_sitename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->sitename(), output);
  }

  // optional int32 updated = 27;
  if (has_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->updated(), output);
  }

  // optional bytes appIcon = 28;
  if (has_appicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      28, this->appicon(), output);
  }

  // optional string stage = 29;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->stage(), output);
  }

  // optional int32 playNum = 30;
  if (has_playnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->playnum(), output);
  }

  // optional string playNumTitle = 31;
  if (has_playnumtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->playnumtitle(), output);
  }

  // optional .cloudbox.protobuf.ImageInfo mImg = 32;
  if (has_mimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->mimg(), output);
  }

  // optional int32 ts = 33;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->ts(), output);
  }

  // optional .cloudbox.protobuf.ImageInfo fixedImg = 34;
  if (has_fixedimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->fixedimg(), output);
  }

  // optional int32 showTitle = 35;
  if (has_showtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->showtitle(), output);
  }

  // repeated .cloudbox.protobuf.IconInfo icons = 36;
  for (int i = 0; i < this->icons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, this->icons(i), output);
  }

  // optional int32 effectType = 37;
  if (has_effecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->effecttype(), output);
  }

  // optional .cloudbox.protobuf.EffectInfo effectInfo = 38;
  if (has_effectinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, this->effectinfo(), output);
  }

  // optional int32 spacing = 39;
  if (has_spacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->spacing(), output);
  }

  // optional .cloudbox.protobuf.BoxColorInfo boxColor = 40;
  if (has_boxcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, this->boxcolor(), output);
  }

}

int BoxInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float width = 1;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 2;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .cloudbox.protobuf.ImageInfo img = 4;
    if (has_img()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->img());
    }

    // optional .cloudbox.protobuf.BoxInfo.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 focusable = 6;
    if (has_focusable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->focusable());
    }

    // optional string channel = 7;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }

    // optional string id = 8;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string title = 9;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string subTitle = 10;
    if (has_subtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subtitle());
    }

    // optional int32 score = 11;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 episode = 12;
    if (has_episode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->episode());
    }

    // optional int32 totalEpisode = 13;
    if (has_totalepisode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalepisode());
    }

    // optional int32 isFinished = 14;
    if (has_isfinished()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfinished());
    }

    // optional string description = 15;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string format = 17;
    if (has_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional .cloudbox.protobuf.ImageInfo icon = 18;
    if (has_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->icon());
    }

    // optional int32 site = 19;
    if (has_site()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->site());
    }

    // optional .cloudbox.protobuf.TargetInfo target = 20;
    if (has_target()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // optional int32 rank = 21;
    if (has_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int32 length = 22;
    if (has_length()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional int32 totalLength = 23;
    if (has_totallength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totallength());
    }

    // optional .cloudbox.protobuf.ImageInfo background = 24;
    if (has_background()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->background());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .cloudbox.protobuf.BoxInfo.Tag tag = 25;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
    }

    // optional string siteName = 26;
    if (has_sitename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sitename());
    }

    // optional int32 updated = 27;
    if (has_updated()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updated());
    }

    // optional bytes appIcon = 28;
    if (has_appicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->appicon());
    }

    // optional string stage = 29;
    if (has_stage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage());
    }

    // optional int32 playNum = 30;
    if (has_playnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playnum());
    }

    // optional string playNumTitle = 31;
    if (has_playnumtitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playnumtitle());
    }

    // optional .cloudbox.protobuf.ImageInfo mImg = 32;
    if (has_mimg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mimg());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 ts = 33;
    if (has_ts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ts());
    }

    // optional .cloudbox.protobuf.ImageInfo fixedImg = 34;
    if (has_fixedimg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixedimg());
    }

    // optional int32 showTitle = 35;
    if (has_showtitle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showtitle());
    }

    // optional int32 effectType = 37;
    if (has_effecttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effecttype());
    }

    // optional .cloudbox.protobuf.EffectInfo effectInfo = 38;
    if (has_effectinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effectinfo());
    }

    // optional int32 spacing = 39;
    if (has_spacing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spacing());
    }

    // optional .cloudbox.protobuf.BoxColorInfo boxColor = 40;
    if (has_boxcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boxcolor());
    }

  }
  // repeated .cloudbox.protobuf.LineInfo lines = 16;
  total_size += 2 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  // repeated .cloudbox.protobuf.IconInfo icons = 36;
  total_size += 2 * this->icons_size();
  for (int i = 0; i < this->icons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->icons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoxInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BoxInfo*>(&from));
}

void BoxInfo::MergeFrom(const BoxInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  lines_.MergeFrom(from.lines_);
  icons_.MergeFrom(from.icons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_img()) {
      mutable_img()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.img());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_focusable()) {
      set_focusable(from.focusable());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_subtitle()) {
      set_subtitle(from.subtitle());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_episode()) {
      set_episode(from.episode());
    }
    if (from.has_totalepisode()) {
      set_totalepisode(from.totalepisode());
    }
    if (from.has_isfinished()) {
      set_isfinished(from.isfinished());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_icon()) {
      mutable_icon()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.icon());
    }
    if (from.has_site()) {
      set_site(from.site());
    }
    if (from.has_target()) {
      mutable_target()->::cloudbox::protobuf::TargetInfo::MergeFrom(from.target());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_totallength()) {
      set_totallength(from.totallength());
    }
    if (from.has_background()) {
      mutable_background()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.background());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_sitename()) {
      set_sitename(from.sitename());
    }
    if (from.has_updated()) {
      set_updated(from.updated());
    }
    if (from.has_appicon()) {
      set_appicon(from.appicon());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_playnum()) {
      set_playnum(from.playnum());
    }
    if (from.has_playnumtitle()) {
      set_playnumtitle(from.playnumtitle());
    }
    if (from.has_mimg()) {
      mutable_mimg()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.mimg());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_fixedimg()) {
      mutable_fixedimg()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.fixedimg());
    }
    if (from.has_showtitle()) {
      set_showtitle(from.showtitle());
    }
    if (from.has_effecttype()) {
      set_effecttype(from.effecttype());
    }
    if (from.has_effectinfo()) {
      mutable_effectinfo()->::cloudbox::protobuf::EffectInfo::MergeFrom(from.effectinfo());
    }
    if (from.has_spacing()) {
      set_spacing(from.spacing());
    }
    if (from.has_boxcolor()) {
      mutable_boxcolor()->::cloudbox::protobuf::BoxColorInfo::MergeFrom(from.boxcolor());
    }
  }
}

void BoxInfo::CopyFrom(const BoxInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoxInfo::IsInitialized() const {

  return true;
}

void BoxInfo::Swap(BoxInfo* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(url_, other->url_);
    std::swap(img_, other->img_);
    std::swap(type_, other->type_);
    std::swap(focusable_, other->focusable_);
    std::swap(channel_, other->channel_);
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(subtitle_, other->subtitle_);
    std::swap(score_, other->score_);
    std::swap(episode_, other->episode_);
    std::swap(totalepisode_, other->totalepisode_);
    std::swap(isfinished_, other->isfinished_);
    std::swap(description_, other->description_);
    lines_.Swap(&other->lines_);
    std::swap(format_, other->format_);
    std::swap(icon_, other->icon_);
    std::swap(site_, other->site_);
    std::swap(target_, other->target_);
    std::swap(rank_, other->rank_);
    std::swap(length_, other->length_);
    std::swap(totallength_, other->totallength_);
    std::swap(background_, other->background_);
    std::swap(tag_, other->tag_);
    std::swap(sitename_, other->sitename_);
    std::swap(updated_, other->updated_);
    std::swap(appicon_, other->appicon_);
    std::swap(stage_, other->stage_);
    std::swap(playnum_, other->playnum_);
    std::swap(playnumtitle_, other->playnumtitle_);
    std::swap(mimg_, other->mimg_);
    std::swap(ts_, other->ts_);
    std::swap(fixedimg_, other->fixedimg_);
    std::swap(showtitle_, other->showtitle_);
    icons_.Swap(&other->icons_);
    std::swap(effecttype_, other->effecttype_);
    std::swap(effectinfo_, other->effectinfo_);
    std::swap(spacing_, other->spacing_);
    std::swap(boxcolor_, other->boxcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BoxInfo::GetTypeName() const {
  return "cloudbox.protobuf.BoxInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayUrlInfo::kFormatFieldNumber;
const int PlayUrlInfo::kUrlFieldNumber;
const int PlayUrlInfo::kOpFieldNumber;
const int PlayUrlInfo::kEdFieldNumber;
const int PlayUrlInfo::kUrltypeFieldNumber;
#endif  // !_MSC_VER

PlayUrlInfo::PlayUrlInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlayUrlInfo::InitAsDefaultInstance() {
}

PlayUrlInfo::PlayUrlInfo(const PlayUrlInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlayUrlInfo::SharedCtor() {
  _cached_size_ = 0;
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  op_ = 0;
  ed_ = 0;
  urltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayUrlInfo::~PlayUrlInfo() {
  SharedDtor();
}

void PlayUrlInfo::SharedDtor() {
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    delete format_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayUrlInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayUrlInfo& PlayUrlInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

PlayUrlInfo* PlayUrlInfo::default_instance_ = NULL;

PlayUrlInfo* PlayUrlInfo::New() const {
  return new PlayUrlInfo;
}

void PlayUrlInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::kEmptyString) {
        format_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    op_ = 0;
    ed_ = 0;
    urltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlayUrlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string format = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_op;
        break;
      }

      // optional float op = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ed;
        break;
      }

      // optional float ed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ed_)));
          set_has_ed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_urltype;
        break;
      }

      // optional int32 urltype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_urltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &urltype_)));
          set_has_urltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayUrlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string format = 1;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->format(), output);
  }

  // optional string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(), output);
  }

  // optional float op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->op(), output);
  }

  // optional float ed = 4;
  if (has_ed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ed(), output);
  }

  // optional int32 urltype = 5;
  if (has_urltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->urltype(), output);
  }

}

int PlayUrlInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }

    // optional string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional float op = 3;
    if (has_op()) {
      total_size += 1 + 4;
    }

    // optional float ed = 4;
    if (has_ed()) {
      total_size += 1 + 4;
    }

    // optional int32 urltype = 5;
    if (has_urltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->urltype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayUrlInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayUrlInfo*>(&from));
}

void PlayUrlInfo::MergeFrom(const PlayUrlInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_ed()) {
      set_ed(from.ed());
    }
    if (from.has_urltype()) {
      set_urltype(from.urltype());
    }
  }
}

void PlayUrlInfo::CopyFrom(const PlayUrlInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayUrlInfo::IsInitialized() const {

  return true;
}

void PlayUrlInfo::Swap(PlayUrlInfo* other) {
  if (other != this) {
    std::swap(format_, other->format_);
    std::swap(url_, other->url_);
    std::swap(op_, other->op_);
    std::swap(ed_, other->ed_);
    std::swap(urltype_, other->urltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayUrlInfo::GetTypeName() const {
  return "cloudbox.protobuf.PlayUrlInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int PlaySiteInfo::kSiteFieldNumber;
const int PlaySiteInfo::kNameFieldNumber;
const int PlaySiteInfo::kIdFieldNumber;
const int PlaySiteInfo::kLengthFieldNumber;
const int PlaySiteInfo::kUrlsFieldNumber;
const int PlaySiteInfo::kTitleFieldNumber;
const int PlaySiteInfo::kLogoFieldNumber;
const int PlaySiteInfo::kLuaInfoFieldNumber;
#endif  // !_MSC_VER

PlaySiteInfo::PlaySiteInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlaySiteInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  logo_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(
      ::cloudbox::protobuf::ImageInfo::internal_default_instance());
#else
  logo_ = const_cast< ::cloudbox::protobuf::ImageInfo*>(&::cloudbox::protobuf::ImageInfo::default_instance());
#endif
}

PlaySiteInfo::PlaySiteInfo(const PlaySiteInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlaySiteInfo::SharedCtor() {
  _cached_size_ = 0;
  site_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logo_ = NULL;
  luainfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaySiteInfo::~PlaySiteInfo() {
  SharedDtor();
}

void PlaySiteInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (luainfo_ != &::google::protobuf::internal::kEmptyString) {
    delete luainfo_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete logo_;
  }
}

void PlaySiteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlaySiteInfo& PlaySiteInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_common_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
#endif
  return *default_instance_;
}

PlaySiteInfo* PlaySiteInfo::default_instance_ = NULL;

PlaySiteInfo* PlaySiteInfo::New() const {
  return new PlaySiteInfo;
}

void PlaySiteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    site_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    length_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_logo()) {
      if (logo_ != NULL) logo_->::cloudbox::protobuf::ImageInfo::Clear();
    }
    if (has_luainfo()) {
      if (luainfo_ != &::google::protobuf::internal::kEmptyString) {
        luainfo_->clear();
      }
    }
  }
  urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlaySiteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 site = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &site_)));
          set_has_site();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }

      // optional string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // optional int32 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_urls;
        break;
      }

      // repeated .cloudbox.protobuf.PlayUrlInfo urls = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_urls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_urls;
        if (input->ExpectTag(50)) goto parse_title;
        break;
      }

      // optional string title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_logo;
        break;
      }

      // optional .cloudbox.protobuf.ImageInfo logo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_luaInfo;
        break;
      }

      // optional string luaInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_luaInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_luainfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaySiteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 site = 1;
  if (has_site()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->site(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(), output);
  }

  // optional int32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }

  // repeated .cloudbox.protobuf.PlayUrlInfo urls = 5;
  for (int i = 0; i < this->urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->urls(i), output);
  }

  // optional string title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->title(), output);
  }

  // optional .cloudbox.protobuf.ImageInfo logo = 7;
  if (has_logo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->logo(), output);
  }

  // optional string luaInfo = 8;
  if (has_luainfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->luainfo(), output);
  }

}

int PlaySiteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 site = 1;
    if (has_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->site());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional string title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional .cloudbox.protobuf.ImageInfo logo = 7;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logo());
    }

    // optional string luaInfo = 8;
    if (has_luainfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->luainfo());
    }

  }
  // repeated .cloudbox.protobuf.PlayUrlInfo urls = 5;
  total_size += 1 * this->urls_size();
  for (int i = 0; i < this->urls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->urls(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaySiteInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlaySiteInfo*>(&from));
}

void PlaySiteInfo::MergeFrom(const PlaySiteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  urls_.MergeFrom(from.urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_site()) {
      set_site(from.site());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_logo()) {
      mutable_logo()->::cloudbox::protobuf::ImageInfo::MergeFrom(from.logo());
    }
    if (from.has_luainfo()) {
      set_luainfo(from.luainfo());
    }
  }
}

void PlaySiteInfo::CopyFrom(const PlaySiteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaySiteInfo::IsInitialized() const {

  return true;
}

void PlaySiteInfo::Swap(PlaySiteInfo* other) {
  if (other != this) {
    std::swap(site_, other->site_);
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(length_, other->length_);
    urls_.Swap(&other->urls_);
    std::swap(title_, other->title_);
    std::swap(logo_, other->logo_);
    std::swap(luainfo_, other->luainfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlaySiteInfo::GetTypeName() const {
  return "cloudbox.protobuf.PlaySiteInfo";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace cloudbox

// @@protoc_insertion_point(global_scope)
